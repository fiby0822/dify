# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたIF_ELSEコンポーネントルールの検証用YMLファイルを作成してください。
特に以下の重要な改善点を検証できるワークフローを実装してください：

### 主要検証ポイント：

1. **変数参照エラーの防止**
   - 実行されない可能性があるノードの出力を参照しない設計
   - 独立answer型パターンの実装
   - 集約型パターンの実装
   - デフォルト保証型パターンの実装

2. **条件の差別化**
   - 各ケースで異なる条件を使用
   - 条件の重複を避ける
   - 数値比較の適切な実装方法

3. **新ルールの順守**
   - case_idフィールドの必須設定
   - Unicode演算子（≥、≤、≠）の使用
   - 外側type="custom"の設定
   - YAMLコメントの完全排除
   - エッジのisInLoop: falseの設定

### 具体的な実装要件：

1. **パターン1：独立answer型**
   - 各条件分岐から直接answerノードへ接続
   - 変数参照エラーが発生しない設計

2. **パターン2：集約型**
   - すべての分岐が1つのノードに集約
   - 集約ノードで適切なエラーハンドリング

3. **パターン3：デフォルト保証型**
   - falseケースで必ず実行されるデフォルト処理
   - 安全な変数参照の実装

4. **数値比較の実装例**
   - 文字列パターンマッチングによる数値範囲判定
   - codeノードによる数値抽出と比較

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/IF_ELSE

## 参考資料フォルダパス（あれば）
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール/コンポーネント記述ルール_IF_ELSE.txt

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。

## 特記事項（最重要）

### 必須設定項目：
1. app.use_icon_as_answer_icon: false（必須）
2. エッジのdata.isInLoop: false（isInIterationは使用しない）
3. version: 0.3.0（古いバージョンは使用しない）
4. advanced-chatモードではstartノードのvariablesを空配列[]に
5. すべてのエッジにselected: falseとzIndex: 0を設定

### YAMLコメントについて：
- **絶対に禁止**：YAMLファイル内にコメント（#で始まる行）を含めない
- 特にnodes配列、edges配列の要素内にコメントを入れるとクラッシュ
- codeノード内のPythonコードにもコメントを含めない
- 説明が必要な場合は、各ノードのdescフィールドを使用

### 変数参照の安全設計：
- IF_ELSEノードで分岐したパスは、その分岐が実行された場合のみ変数が利用可能
- 実行されなかった分岐のノードからは変数を参照できない（エラーになる）
- 複数の分岐結果を統合したい場合は、各分岐で独立した処理を完結させる

### 構造について（advanced-chatモード）：
- 必ずworkflow.graphセクションを作成し、その中にedgesとnodesを配置
- workflow.featuresセクションは必須
- targetTypeには実際のノードタイプを指定（customではない）