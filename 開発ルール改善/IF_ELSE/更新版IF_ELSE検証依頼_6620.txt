# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたIF_ELSEコンポーネントルールの完全検証用アプリケーションを作成してください。
特に以下の新しいルールと制限事項を確実にテストできるようにしてください：

### 検証項目（重要度順）

1. **条件分岐後の変数参照ルール**
   - 実行されない分岐のノード出力を参照するとエラーになることの確認
   - 各分岐で独立した処理を完結させるパターンの実装
   - 独立answer型、集約型、デフォルト保証型の3つの設計パターンをすべて実装

2. **YAMLコメントの完全禁止**
   - YAMLファイル内に一切のコメント（#で始まる行）を含めない
   - codeノード内のPythonコードにもコメントを含めない
   - 説明はすべてdescフィールドで記載

3. **必須フィールドの完全実装**
   - app.use_icon_as_answer_icon: falseを必ず設定
   - すべてのエッジでdata.isInLoop: false（isInIterationではない）
   - エッジのtargetTypeに実際のノードタイプを指定（customではない）
   - case_idフィールドを必ず設定（idと同じ値）

4. **Unicode演算子の使用**
   - 数値比較では必ずUnicode文字（≥、≤、≠）を使用
   - ASCIIの>=、<=、!=は使用しない

### 実装すべきテストケース

1. **独立answer型パターン**
   - 商品在庫レベルチェック（3段階：緊急発注、通常発注、在庫過多）
   - 各分岐から直接独立したanswerノードへ接続
   - 他の分岐の変数を参照しない

2. **集約型パターン**
   - テストスコア評価（excellent、good、average、poor）
   - すべての分岐が1つの集約ノードに収束
   - 集約ノードでは実行された分岐の結果のみを使用

3. **デフォルト保証型パターン**
   - ユーザー権限チェック（admin、editor、viewer、guest）
   - falseケースで必ずデフォルト処理を実行
   - どの条件にも合致しない場合の安全な処理

### 動作フロー
1. ユーザー入力を受け取る（advanced-chatモード、variables空配列）
2. codeノードで3つのテスト値を生成（在庫数、スコア、権限レベル）
3. 3つの独立したIF_ELSEノードで各パターンをテスト
4. 最終的に統合されたレポートを出力

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/IF_ELSE

## 参考資料フォルダパス（あれば）
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール/コンポーネント記述ルール_IF_ELSE.txt

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。

特に以下の点を厳守してください：
- YAMLファイル内に一切のコメントを含めない
- codeノード内のPythonコードにもコメントを含めない
- app.use_icon_as_answer_icon: falseを必ず設定
- version: 0.3.0を使用
- advanced-chatモードではgraphセクションが必須

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。

IF_ELSEコンポーネントの重要事項：
- 条件分岐後の変数参照は実行されたパスのみ
- case_idは必須（idと同じ値）
- 数値比較はUnicode演算子（≥、≤、≠）
- エッジのisInLoop: false（isInIterationは誤り）
- targetTypeには実際のノードタイプを指定

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。

### 4. 絶対に避けるべきこと
- YAMLファイル内のコメント（クラッシュの原因）
- 実行されない分岐の変数参照（エラーの原因）
- isInIterationの使用（存在しないフィールド）
- ASCII演算子（>=、<=、!=）の使用