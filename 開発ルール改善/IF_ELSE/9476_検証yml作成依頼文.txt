# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたIF_ELSEコンポーネントのコーディングルールに完全準拠したYMLファイルを作成し、すべての仕様が正しく動作することを検証してください。

以下の検証項目をすべて網羅するワークフローを実装してください：

### 1. ノードレベルの必須フィールド検証
- 外側のtype属性が"custom"（data.typeとは異なる）
- position、positionAbsolute、height、width、selectedが正しく設定
- sourcePosition、targetPositionが設定

### 2. IF_ELSE固有の必須フィールド検証
- data.type: "if-else"
- 各caseにidとcase_idが同じ値で設定
- conditions配列の構造（variable_selector、comparison_operator、value）
- logical_operator（"and"/"or"）
- data.selectedとdata.titleの存在

### 3. 比較演算子の完全テスト
#### 文字列比較（9種類すべて）
- contains（部分一致）
- not contains（部分不一致）  
- start with（前方一致）
- end with（後方一致）
- is（完全一致）
- is not（不一致）
- in（リスト内存在）
- not in（リスト内非存在）
- all of（すべて含む）

#### 数値比較（Unicode演算子使用）
- = （等しい）
- ≠ （等しくない）
- > （より大きい）
- < （より小さい）
- ≥ （以上）
- ≤ （以下）

#### NULL/存在チェック（6種類すべて）
- empty（空）
- not empty（空でない）
- null（NULL）
- not null（NULLでない）
- exists（存在する）
- not exists（存在しない）

### 4. エッジ設定の検証
- targetTypeが実際のノードタイプ（"custom"ではない）
- isInLoop: false（isInIterationではない）
- selected、zIndexが設定

### 5. 推奨パターンの実装
- 独立answer型パターン（各分岐から直接answerへ）
- 条件の明確な差別化
- デフォルトケース（false）の適切な処理

### 6. エラー防止の確認
- YAMLコメントを一切含まない
- codeノード内のPythonコードにもコメントなし
- 分岐後の変数参照は実行されたパスのみ
- 総ノード数を20個以下に制限

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/IF_ELSE

## 参考資料フォルダパス（あれば）
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール/コンポーネント記述ルール_IF_ELSE.txt

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。

### 3. 品質チェック
YMLファイル作成後は
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/クラッシュ事項チェックリスト.md
を参照し、必ずセルフレビューを実施してください。