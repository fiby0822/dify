# Dify YMLファイル作成依頼プロンプト

## 要件
顧客問い合わせ対応振り分けシステムを作成してください。

### システム概要
- ユーザーからの問い合わせ内容を分析し、緊急度とカテゴリーに基づいて適切な対応を行うワークフロー
- IF_ELSEノードを2段階で使用した複雑な条件分岐を実装
- Codeノードは使用せず、LLMノードとIF_ELSEノードのみで実装

### 詳細仕様
1. **第1段階：緊急度判定**
   - ユーザーの問い合わせ内容から緊急度を判定
   - 条件：
     - 緊急：「至急」「緊急」「すぐに」「今すぐ」などのキーワードが含まれる
     - 通常：上記以外

2. **第2段階：カテゴリー判定**
   - 問い合わせ内容からカテゴリーを判定
   - 条件：
     - 技術サポート：「エラー」「動作しない」「不具合」「バグ」などのキーワード
     - 料金関連：「料金」「支払い」「請求」「価格」などのキーワード
     - その他：上記以外

3. **対応メッセージ**
   - 緊急×技術サポート：「緊急技術サポートチームが優先的に対応いたします。」
   - 緊急×料金関連：「緊急料金サポートチームが至急確認いたします。」
   - 緊急×その他：「緊急対応チームがすぐに確認いたします。」
   - 通常×技術サポート：「技術サポートチームが順次対応いたします。」
   - 通常×料金関連：「料金サポートチームが確認後、ご連絡いたします。」
   - 通常×その他：「カスタマーサポートチームが対応いたします。」

### 実装上の制約
- **必ずversion: 0.3.0を使用すること**
- IF_ELSEノードの各caseには必ずlogical_operatorを設定
- 条件のidフィールドはオプションだが、デバッグのため設定を推奨
- 各分岐で独立したLLMノードを配置する「独立実行パターン」を採用
- エッジのpriorityフィールドは使用しない

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/IF_ELSE

## 参考資料フォルダパス（あれば）
/Users/tatsuya/Documents/01_fiby/09_ゼット/構築フィードバック/インポート成功/検証YML_5931.yml
（独立実行パターンの成功例として参考にしてください）

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。

特に以下の点に注意：
- 使用可能なノードタイプは基本4種類（start、llm、if-else、answer）を優先
- エッジのtargetTypeは接続先ノードの実際のタイプと完全一致させる
- YAMLファイル内にコメントは一切含めない

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。

特にIF_ELSEノードについては：
- /Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール/コンポーネント記述ルール_IF_ELSE.txt を必ず参照
- sourceHandleとcase_idの完全一致に注意（大文字小文字も含めて正確に）

### 3. 品質チェック
YMLファイル作成後は
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/クラッシュ事項チェックリスト.md
を参照し、必ずセルフレビューを実施してください。チェックに引っかかった場合は、ymlファイルを改修すること。

### 重要な確認事項
- ノードタイプチェック（基本4種類のみ使用）
- 変数参照パターンチェック（独立実行パターンの採用）
- logical_operatorの設定確認（全caseに必須）
- 比較演算子はASCII文字（>=、<=、!=）を使用