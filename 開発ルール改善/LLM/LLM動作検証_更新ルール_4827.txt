# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたLLMコンポーネント記述ルールが正しく動作するかを検証するためのDifyアプリケーションを作成してください。特に、advanced-chatモードでの動作を重点的に検証します。

### 検証項目
1. **advanced-chatモードでの必須事項**
   - startノードのvariablesは空配列[]（重要）
   - ユーザー入力は{{#sys.query#}}で参照
   - {{#start_node.変数名#}}は使用しない

2. **基本的なノード構成の検証**
   - すべてのノードの外側type属性が"custom"
   - data.type属性は各ノードタイプに応じて正しく設定

3. **LLMノードの必須フィールド**
   - structured_output_enabled: false
   - vision.enabled: false
   - context.enabled: false と context.variable_selector: []
   - memory.enabled: false
   - variables: []（省略可能）

4. **プロバイダー設定**
   - シンプルな形式（"openai"）を使用
   - 詳細パス形式は使用しない

### アプリケーション構成
シンプルな質問応答システムを実装：
- startノード：ユーザーからの質問を受け取る（variables: []）
- LLMノード：質問に対する回答を生成
- answerノード：回答を表示

### 特別な注意事項
1. **advanced-chatモードの厳守事項**
   - startノードでは絶対に変数を定義しない
   - ユーザー入力はシステムが自動的に管理（sys.query）
   - 変数を定義すると「xxx is required」エラーが発生

2. **システム変数の使用**
   - {{#sys.query#}}：ユーザーからの現在の入力
   - start_node.変数名の形式は使用禁止

3. **エラー回避のポイント**
   - type: "text"は絶対に使用しない（text-inputが正しい）
   - 変数定義が必要な場合はworkflowモードを検討

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/LLM

## 参考資料フォルダパス（あれば）
特になし

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。
**特に重要**：
- advanced-chatモードでのstartノード変数設定（355-372行目）
- システム変数の使用方法（679-690行目）

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。
特に以下のファイルを重点的に参照：
- コンポーネント記述ルール_LLM.txt（142-156行目：advanced-chatモードでの注意事項）
- コンポーネント記述ルール_開始.txt（26-36行目：advanced-chatモードでの変数設定）

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。
特に以下の項目を重点確認：
- 4.1 startノード（122行目：advanced-chatモードでvariablesが空配列）
- 10.3.4 動作エラー診断（283-304行目）

### 4. 最重要ポイント
- **絶対守ること**: advanced-chatモードではstartノードのvariables: []
- **使用禁止**: {{#start_node.xxx#}}形式の変数参照
- **必ず使用**: {{#sys.query#}}でユーザー入力を参照