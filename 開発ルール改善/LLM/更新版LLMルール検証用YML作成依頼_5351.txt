# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたLLMコンポーネントのmemory設定ルールが正しく機能するかを検証するため、以下の3つのパターンを含むテスト用Difyアプリケーションを作成してください：

1. **パターン1: memoryフィールドを省略したLLMノード（推奨パターン）**
   - memoryフィールドを完全に省略
   - これが最も推奨される実装方法

2. **パターン2: memory設定を完全な構造で記載したLLMノード**
   - memory.enabled: false
   - memory.window（enabled, size）を含む完全な構造
   - role_prefixも含める

3. **パターン3: 複数のLLMノードの連携**
   - 1つ目のノード：memoryフィールドを省略
   - 2つ目のノード：完全なmemory構造を持つ
   - ノード間でデータを受け渡し

4. **共通要件**
   - advanced-chatモードで作成
   - startノードのvariablesは空配列[]
   - すべての必須パラメータを正しく設定
   - エラーが発生しないことを重視

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/LLM

## 参考資料フォルダパス（あれば）
なし

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。
特に、コンポーネント記述ルール_LLM.txt の更新されたmemory設定に関する内容を厳密に遵守してください。

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。

## 重要な注意事項
- **memory設定の新ルール**を必ず適用すること：
  - memoryを使用しない場合：フィールド自体を完全に省略（推奨）
  - memoryを使用する場合：windowフィールドを含む完全な構造が必須
  - 簡略記法（memory: { enabled: false }）は使用禁止
- 外側のtype属性は必ず"custom"にすること
- positionAbsoluteはpositionと同じ値にすること
- prompt_templateには必ずid属性を含めること
- YAMLコメントはノード定義の外側に配置すること
- providerはシンプルな形式（"openai"など）を使用すること