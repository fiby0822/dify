# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたLLMコンポーネントの記述ルールが正しく機能することを検証するため、以下の要件を満たすDifyアプリケーションのYMLファイルを作成してください：

1. **更新されたLLMノードルールの検証**
   - type: "custom"（外側のtype属性）
   - data.type: "llm"（データ内のtype属性）
   - contextフィールドを含む（enabled: false, variable_selector: []）
   - memoryフィールドを含む（enabled: false）
   - variablesフィールドは省略しない（空配列で定義）

2. **複雑な処理フローの実装**
   - ユーザーからテキスト入力を受け取る
   - 2つのLLMノードを連携させる（分析用と回答生成用）
   - 最初のLLMで入力を分析し、2番目のLLMで最終回答を生成
   - 変数参照（{{#node_id.variable#}}形式）を活用

3. **品質検証のポイント**
   - すべての必須パラメータが正しく設定されていること
   - インポート成功かつ表示も正常に行われること
   - プロバイダー名はシンプルな形式（"openai"）を使用

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/LLM

## 参考資料フォルダパス（あれば）
なし

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。
特に以下の点に注意：
- すべてのノードの外側typeは"custom"固定
- ノードのpositionAbsoluteは必須
- height/widthの設定は必須

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。
特に今回は「コンポーネント記述ルール_LLM.txt」の更新版を重点的に参照し、以下を確実に実装してください：
- contextフィールドの追加
- memoryフィールドの追加
- type: "custom"の使用

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。