# Dify YMLファイル作成依頼プロンプト

## 要件
改善されたLLMコンポーネント記述ルールが正しく動作するかを検証するためのDifyアプリケーションを作成してください。

### 検証項目
1. **ノードtype属性の検証**
   - すべてのノードの外側type属性が"custom"に設定されていることを確認
   - data.type属性は各ノードタイプに応じて正しく設定（start/llm/answer）

2. **LLMノード必須フィールドの検証**
   - structured_output_enabled: false
   - vision.enabled: false
   - context.enabled: false と context.variable_selector: []
   - memory.enabled: false（オプション）
   - variables: []（オプション - 省略してテスト）

3. **プロバイダー設定の検証**
   - シンプルな形式（"openai"）を使用
   - 詳細なパス形式（"langgenius/openai/openai"）は使用しない

4. **複数LLMノードの連携**
   - 2つのLLMノードを連携させ、変数参照が正しく機能することを確認
   - 最初のLLMで質問を分析し、2番目のLLMで詳細な回答を生成

### アプリケーション構成
- startノード：ユーザーからの質問を受け取る
- LLMノード1（question_analyzer）：質問を分析し、回答のポイントを整理
- LLMノード2（answer_generator）：分析結果を基に詳細な回答を生成
- answerノード：最終的な回答を表示

### 特別な注意事項
1. **すべてのノードでtype: "custom"を使用**（改善ルールの最重要ポイント）
2. LLMノードではvariablesフィールドを省略してテスト
3. contextフィールドを必ず含める
4. プロバイダーはシンプルな"openai"形式を使用

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/LLM

## 参考資料フォルダパス（あれば）
特になし

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。
**特に重要**：ノードのtype属性は全て"custom"固定（165行目）

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。
特に以下のファイルを重点的に参照：
- コンポーネント記述ルール_LLM.txt（改善版）
- コンポーネント記述ルール_開始.txt
- コンポーネント記述ルール_回答.txt

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。

### 4. 改善ルールの重要ポイント
- **ノードtype属性**：外側のtypeは必ず"custom"（data.typeとは異なる）
- **LLMノードの必須フィールド**：
  - structured_output_enabled: false
  - vision.enabled: false
  - context: { enabled: false, variable_selector: [] }
- **variables**：オプションフィールドとして省略可能
- **provider**：シンプルな形式（"openai"）を使用