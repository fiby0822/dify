# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたLLMコンポーネント記述ルールの動作検証を目的として、以下の要素をすべて含むDifyアプリケーションを作成してください：

1. **更新された必須パラメータの検証**
   - 外側のtype属性が「custom」固定になっているか
   - context フィールドが正しく設定されているか
   - variables フィールドが省略された場合でも動作するか
   - memory フィールドの動作確認

2. **複数パターンのLLMノード実装**
   - Pattern A: すべてのフィールドを含む完全版
   - Pattern B: variablesを省略した版
   - Pattern C: memoryも含めた拡張版

3. **ノード間の連携**
   - 開始ノード（start） - type: custom
   - 3つのLLMノード（上記パターン）- type: custom
   - 終了ノード（answer） - type: custom
   - すべてのノード間の適切なedge接続

4. **具体的な処理内容**
   - ユーザーから技術的な質問を受け取る
   - Pattern A: 基本的な回答を生成
   - Pattern B: より詳細な技術解説を追加
   - Pattern C: さらに実装例やベストプラクティスを提供
   - 最終的に3つの回答を統合して表示

5. **検証ポイント**
   - インポートが成功すること
   - 表示が正しくされること（表示エラーが起きないこと）
   - 各LLMノードが期待通りに動作すること

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/LLM/llm_updated_rules_validation_2420.yml

## 参考資料フォルダパス（あれば）
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール/コンポーネント記述ルール_LLM.txt

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。

特に以下の点に注意：
- すべてのノードの外側type属性は「custom」固定
- LLMノードのvariablesはオプション（省略可能）
- contextフィールドは推奨（enabled: false, variable_selector: []）

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。

特に以下の項目を重点的に確認：
- ノードのtype属性が「custom」になっているか
- LLMノードにcontext/memoryフィールドが適切に設定されているか
- providerの表記がシンプルな形式（「openai」）になっているか