# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたLLMコンポーネントルール（特にmemory設定）の動作検証を行うため、以下の機能を持つDifyアプリケーションを作成してください：

1. **memory設定パターンの検証**
   - パターン1: memoryフィールドを完全に省略したLLMノード（推奨パターン）
   - パターン2: memory設定を完全な構造で記述したLLMノード（enabled: false）
   - パターン3: memory設定を有効化したLLMノード（enabled: true）

2. **各パターンでの動作確認**
   - ユーザーからの質問を受け取る
   - 3つの異なるLLMノードで処理
   - それぞれの回答を統合して最終的な回答を生成

3. **検証ポイント**
   - 簡略記法（memory: { enabled: false }）を使用しない
   - windowフィールドを必ず含める（memory使用時）
   - role_prefixの適切な設定
   - エラーが発生しないことの確認

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/LLM

## 参考資料フォルダパス（あれば）
なし

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。

**特に重要：**
- コンポーネント記述ルール_LLM.txtの「memory設定の注意事項（重要）」セクションを必ず確認
- memory設定の3つのパターンすべてを実装して検証

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。

## 追加要件
- advanced-chatモードを使用
- startノードのvariablesは空配列[]
- 各LLMノードには分かりやすい説明（desc）を追加
- エラーハンドリングを考慮した実装