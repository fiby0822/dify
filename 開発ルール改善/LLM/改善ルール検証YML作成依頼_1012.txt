# Dify YMLファイル作成依頼プロンプト

## 要件
更新されたLLMコンポーネントのコーディングルールが正しく動作するかを検証するためのDifyアプリケーションを作成してください。

以下の機能を持つアプリケーションを作成：
1. ユーザーからの質問を受け取る
2. 2つのLLMコンポーネントを使用した段階的な処理：
   - 第1段階：質問内容を分析・整理するLLM
   - 第2段階：整理された内容に基づいて詳細な回答を生成するLLM
3. 最終的な回答を表示

### 技術要件（改善されたルールに基づく）
- 外側のtype属性は必ず"custom"に設定すること
- LLMコンポーネントにcontextフィールドを含めること（推奨）
- memoryフィールドも追加すること（オプション）
- variablesフィールドは省略可能（今回は省略して検証）
- providerは"openai"というシンプルな形式を使用
- すべての必須パラメータを含めること
- systemプロンプトとuserプロンプトの両方を適切に使用すること

## アウトプットフォルダパス
/Users/tatsuya/Documents/01_fiby/09_ゼット/Dev/LLM

## 参考資料フォルダパス（あれば）
特になし

## コーディングルール
Dify YMLファイルの作成にあたっては、以下のコーディングルールに従ってください：

### 1. 全体コーディングルール
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/全体コーディングルール.md を参照してください。
特に重要な点：
- すべてのノードの外側type属性は"custom"固定
- data.typeには各ノードタイプ（start/llm/answer）を設定

### 2. コンポーネント別コーディングルール
各コンポーネントを使用する際は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール フォルダ内の該当するtxtファイルを参照してください。
特に、更新されたコンポーネント記述ルール_LLM.txt を重点的に参照し：
- 外側のtype属性は"custom"固定
- contextフィールドを含める（推奨）
- memoryフィールドを含める（オプション）
- variablesフィールドは省略可能

### 3. 品質チェック
YMLファイル作成後は、/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md を参照し、必ずセルフレビューを実施してください。

### 特別な検証ポイント
- すべてのノードの外側type属性が"custom"になっているか
- LLMノードにcontext/memoryフィールドが含まれているか
- providerがシンプルな形式（"openai"）になっているか
- positionAbsoluteがpositionと同じ値になっているか
- height/widthが正しく設定されているか
- prompt_templateのid属性が設定されているか