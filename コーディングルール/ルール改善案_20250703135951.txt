================================
Dify YMLコーディングルール改善案
作成日: 2025/01/13
================================

【改善の背景】
検証結果から、template-transformとanswerノードでの変数参照記法の誤りが主要なエラー原因であることが判明しました。
現行ルールではこれらの記法の使い分けが不明確であり、開発者の混乱を招いています。

【主要な改善点】

==================================================
1. 変数参照記法の使い分けルールの明確化
==================================================

### 1.1 ノードタイプ別の変数参照記法

┌─────────────────────┬────────────────────────────────────────┐
│ ノードタイプ         │ 使用すべき記法                         │
├─────────────────────┼────────────────────────────────────────┤
│ template-transform   │ {{ variable }}（Jinja2標準記法）       │
│ answerノード         │ {{#node_id.field#}}（Dify独自記法）    │
│ LLMノード            │ {{#node_id.field#}}（Dify独自記法）    │
│ toolノード           │ {{#node_id.field#}}（Dify独自記法）    │
└─────────────────────┴────────────────────────────────────────┘

### 1.2 具体的な使用例

#### ✅ 正しい例：

```yaml
# template-transformノード
- data:
    template: |
      分析対象：{{ sys.query }}
      取得データ：{{ batch_get_data }}
      JSON形式：{{ data | tojson }}
      整形済み：{{ text | trim }}
    variables:
    - variable: batch_get_data
      value_selector:
      - batch_get_node
      - json

# answerノード
- data:
    answer: |
      分析結果：{{#llm_analyzer.text#}}
      処理データ：{{#transform_node.output#}}

# LLMノードのプロンプト
prompt_template:
- role: user
  text: |
    入力内容：{{#sys.query#}}
    変換データ：{{#transform_node.output#}}

# toolノードのパラメーター
tool_parameters:
  data:
    value: '{{#transform_node.output#}}'
  spreadsheet_id:
    value: '{{#sys.query#}}'
```

#### ❌ 誤った例：

```yaml
# template-transformノード（誤り）
- data:
    template: |
      分析対象：{{#sys.query#}}  # ← #記号は不要
      取得データ：{{#batch_get_data | json#}}  # ← 完全に誤り

# answerノード（誤り）
- data:
    answer: |
      分析結果：{{ llm_analyzer.text }}  # ← #記号が必要
```

==================================================
2. フィルター記法の統一
==================================================

### 2.1 template-transformノードでのフィルター

```yaml
# 正しいフィルター使用法
{{ variable | trim }}        # 前後の空白を除去
{{ variable | tojson }}      # JSON形式に変換
{{ variable | upper }}       # 大文字に変換
{{ variable | default('') }} # デフォルト値設定

# 誤った記法（使用禁止）
{{#variable | json#}}        # ← 誤り
{{#variable | trim#}}        # ← 誤り
```

### 2.2 その他のノードでのフィルター

- answerノード、LLMノード、toolノードではフィルターは使用できません
- データ変換が必要な場合は、template-transformノードを経由してください

==================================================
3. エラー防止のためのチェックリスト追加
==================================================

### 3.1 template-transformノードチェックリスト

- [ ] 変数参照に#記号を使用していないか
- [ ] {{ variable }}形式を使用しているか
- [ ] フィルター使用時に{{ variable | filter }}形式になっているか
- [ ] variablesセクションで変数が適切に定義されているか

### 3.2 answerノードチェックリスト

- [ ] 変数参照に{{#node_id.field#}}形式を使用しているか
- [ ] 存在するノードIDと正しいフィールド名を参照しているか
- [ ] フィルターを使用していないか（使用禁止）

==================================================
4. 品質チェックリストの修正事項
==================================================

### 4.1 修正が必要な箇所

現行：
```markdown
- [ ] `{{#variable | json#}}`形式を使用（`|tojson`ではない）
```

修正後：
```markdown
### template-transformノード
- [ ] 変数参照は{{ variable }}形式を使用（#記号は使用しない）
- [ ] JSONフィルターは{{ variable | tojson }}を使用

### answerノード・LLMノード・toolノード
- [ ] 変数参照は{{#node_id.field#}}形式を使用
- [ ] フィルターは使用していない（template-transformで事前に変換）
```

==================================================
5. コンポーネント記述ルールの追加事項
==================================================

### 5.1 GoogleShpredSheet操作における注意点

```yaml
# batch_updateツールのdata参数では、以下の形式を推奨
tool_parameters:
  data:
    type: mixed
    value: '{{#transform_node.output#}}'  # 事前にtemplate-transformで整形済みデータを参照
```

### 5.2 template-transformの活用パターン

```yaml
# パターン1：Google Sheets書き込み用データの整形
template: |
  [{
    "range": "OUTPUT!A1:B5",
    "values": [
      ["項目", "値"],
      ["分析結果", {{ analysis_result | tojson }}],
      ["更新日時", "{{ 'now' | date('Y/m/d H:i') }}"]
    ]
  }]

# パターン2：LLM入力用のデータ整形
template: |
  取得データ（CSV形式）：
  {% for row in sheet_data[0].values %}
  {{ row | join(',') }}
  {% endfor %}
```

==================================================
6. エラー事例集の追加
==================================================

### 6.1 TemplateSyntaxError: unexpected char '#'

**原因**：template-transformノードで{{#variable#}}記法を使用
**解決方法**：{{ variable }}に修正

### 6.2 Variable {{#variable#}} cannot be found

**原因**：answerノードやLLMノードで変数が見つからない
**解決方法**：
1. ノードIDが正しいか確認
2. フィールド名（output、text、jsonなど）が正しいか確認
3. 参照するノードが実行フローの前段に存在するか確認

==================================================
7. 検証YML_5931.ymlの成功パターンの活用
==================================================

検証YML_5931.ymlはtemplate-transformを使用せず、LLMとif-elseノードのみで構成されており、
変数参照の混乱が起きにくい構造となっています。

### 推奨事項：
- 複雑なデータ変換が不要な場合は、template-transformの使用を最小限に抑える
- データ変換が必要な場合は、専用のtemplate-transformノードを作成し、
  その出力を他のノードから{{#node_id.output#}}形式で参照する

==================================================
8. 実装時の推奨フロー
==================================================

1. 最初に成功例（GoogleShpredSheetサンプル.yml、検証YML_5931.yml）を参考にする
2. template-transformノードを使用する場合は、必ず{{ variable }}記法を使用
3. 他のノードからtemplate-transformの出力を参照する際は{{#node_id.output#}}を使用
4. 実装後、各ノードの変数参照記法を再確認
5. Difyへのインポート前に、本改善案のチェックリストで最終確認

==================================================

以上の改善により、変数参照記法の誤りによるエラーを大幅に削減できると期待されます。