# Difyワークフロー開発ルール改善案

## 分析日時：2025年7月3日

## 1. エラー分析サマリー

### 1.1 インポート成功_クラッシュの原因
- Pythonコード内での変数参照方法の誤り（sys.queryなど）
- 辞書形式とDify変数参照形式の混在
- テンプレート記法の不統一

### 1.2 動作エラーの共通原因
**TypeError: 'builtin_function_or_method' object is not iterable**
- Jinja2テンプレート内でのフィルター記法エラー
- パイプ記号（|）とフィルター名の間にスペースが存在
- 例：`{{ variable | filter }}` → エラー、`{{ variable|filter }}` → 正常

### 1.3 正常動作サンプルの特徴
- 変数参照記法の統一：`{{#変数名#}}`
- 明確なJSON構造定義
- 適切なエッジ設定とノードID

## 2. コーディングルール改善提案

### 2.1 全体コーディングルール（03_変数とデータ管理.md）への追加

#### 現行ルールの問題点
- Jinja2フィルター記法の重要性が不十分
- エラー事例の記載が散在

#### 改善案
```markdown
## 最重要：Jinja2フィルター記法の厳密なルール

### 絶対に守るべきルール（これを守らないとクラッシュします）
1. **フィルター使用時、パイプ記号（|）とフィルター名の間にスペースを入れない**
   - ❌ NG: `{{ variable | filter }}`
   - ✅ OK: `{{ variable|filter }}`
   - ✅ OK: `{{ variable|filter1|filter2|filter3 }}`

2. **理由**：スペースがあると、フィルターが関数として認識されず、'builtin_function_or_method' object is not iterableエラーが発生

### よくあるミス
- `{{ row | join(',') }}` → エラー
- `{{ row|join(',') }}` → 正常
- `{{ data | tojson }}` → エラー  
- `{{ data|tojson }}` → 正常
```

### 2.2 品質チェックリスト.mdへの追加

#### template-transformノードのチェック項目に追加
```markdown
## template-transformノードの必須チェック項目

### 最優先チェック項目（エラー防止）
- [ ] **Jinja2フィルターのパイプ記号とフィルター名の間にスペースがない**
  - 検索パターン：`| \w+`（パイプの後にスペースがある箇所）
  - 例：`| join`、`| tojson`、`| trim`などはすべてNG
- [ ] 変数参照がtemplate-transform内では`{{ }}`形式、他ノードでは`{{# #}}`形式
- [ ] Google Sheetsデータへのアクセスが適切（valuesプロパティの確認）
```

### 2.3 クラッシュ事項チェックリスト.mdへの追加

#### 最上位に新セクション追加
```markdown
# 最頻出クラッシュ原因TOP3（必ず最初にチェック）

## 1. Jinja2フィルターのスペース問題
**エラー：** TypeError: 'builtin_function_or_method' object is not iterable
**原因：** `{{ variable | filter }}` のようにパイプとフィルターの間にスペース
**解決：** `{{ variable|filter }}` にする（スペースを削除）

## 2. 変数参照形式の混在
**エラー：** jinja2.exceptions.UndefinedError
**原因：** LLMノードで`{{ variable }}`形式を使用
**解決：** `{{#node_id.output#}}`形式を使用

## 3. Pythonコード内での変数参照
**エラー：** NameError または AttributeError
**原因：** `sys.query`のような直接参照
**解決：** `{{#sys.query#}}`を使用
```

### 2.4 コンポーネント記述ルール_IF_ELSE.txtへの追加

```
## IF-ELSEノードと他ノードの連携時の注意

### 変数参照の統一
- IF-ELSEノードの条件式：`{{#node_id.output#}}`形式
- 後続ノードでの参照：`{{#if_else_node_id.true_output#}}`または`{{#if_else_node_id.false_output#}}`
- sourceHandleの命名規則を厳守（true/false、またはカスタムケース名）
```

### 2.5 新規チェックツールの提案

#### validate_dify.pyへの機能追加
```python
def check_jinja2_filter_spaces(yaml_content):
    """Jinja2フィルターのスペース問題をチェック"""
    import re
    
    # template-transformノードのテンプレートを抽出
    template_sections = re.findall(r'template:\s*\|([^-]+?)(?=\n\s*\w+:|$)', yaml_content, re.MULTILINE | re.DOTALL)
    
    errors = []
    for i, template in enumerate(template_sections):
        # パイプ記号の後にスペースがあるパターンを検出
        space_filters = re.findall(r'\{\{[^}]*\|\s+\w+[^}]*\}\}', template)
        if space_filters:
            for match in space_filters:
                errors.append(f"template-transformノード {i+1}: フィルターにスペースがあります: {match}")
    
    return errors

def check_variable_reference_consistency(yaml_content):
    """変数参照形式の一貫性をチェック"""
    import re
    
    errors = []
    
    # LLMノードのプロンプトで{{ }}形式を使用していないかチェック
    llm_prompts = re.findall(r'type:\s*llm.*?prompt:.*?text:\s*\|([^-]+?)(?=\n\s*\w+:|$)', yaml_content, re.MULTILINE | re.DOTALL)
    
    for i, prompt in enumerate(llm_prompts):
        wrong_refs = re.findall(r'\{\{[^#][^}]+[^#]\}\}', prompt)
        if wrong_refs:
            for ref in wrong_refs:
                errors.append(f"LLMノード {i+1}: 誤った変数参照形式: {ref} → {{#...#}}形式を使用してください")
    
    return errors
```

## 3. 開発プロセスの改善提案

### 3.1 開発前チェックリスト
1. Google Sheetsサンプル.ymlを参照基準として使用
2. 変数参照形式の事前決定（ノードタイプ別）
3. template-transformノードのJinja2記法確認

### 3.2 開発後の必須検証
1. validate_dify.pyの自動チェック実行
2. Jinja2フィルターのスペースチェック（全文検索：`| \w`）
3. インポート→実行の段階的テスト

### 3.3 エラー対応フロー
1. TypeError発生時→まずJinja2フィルターのスペースを確認
2. UndefinedError発生時→変数参照形式を確認
3. Google Sheets関連エラー→データ構造とアクセス方法を確認

## 4. ドキュメント改善提案

### 4.1 エラー事例集の作成
- 実際のエラーメッセージと解決方法の対応表
- スクリーンショット付きの解説

### 4.2 クイックリファレンスカードの作成
```
=== Dify変数参照クイックリファレンス ===
場所                    | 形式
------------------------|------------------
LLM/Codeノード         | {{#node_id.output#}}
template-transform内    | {{ variable }}
Jinja2フィルター       | {{ var|filter }} （スペースなし！）
IF-ELSE条件           | {{#node_id.output#}}
Google Sheetsパラメータ | {{#node_id.output#}}
```

## 5. 実装優先順位

### 最優先（即時対応）
1. Jinja2フィルターのスペース問題を全ルールファイルの最上位に記載
2. validate_dify.pyにスペースチェック機能を追加

### 高優先（1週間以内）
1. 品質チェックリストの更新
2. エラー事例集の作成

### 中優先（2週間以内）
1. 開発者向けクイックリファレンスカードの作成
2. 自動修正ツールの開発

---
以上の改善により、今回発生したエラーの90%以上を防止できると推定されます。