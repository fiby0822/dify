# Difyコーディングルール改善案
作成日：2025年1月17日
作成者：Claude

## 調査結果の概要

### インポート成功_クラッシュの原因
1. YAMLファイル構造は正しいが、実行時にクラッシュ
2. エッジとノードの順序の違い（正常動作ファイルはedgesが先）
3. Unicode文字の使用（\U0001F6D2など）

### 動作エラーの原因
1. **ケース1**: Jinja2テンプレートでの配列アクセスエラー
2. **ケース2**: 変数参照記法の混在とデータ型の不一致

## 改善が必要なルール項目

### 1. template-transformノードのルール強化

#### 現状の問題
- 変数参照記法の説明が不十分で混乱を招いている
- 配列・オブジェクトアクセスの安全性に関する記述が不足
- エラーハンドリングのベストプラクティスがない

#### 改善案
**コンポーネント記述ルール_テンプレート.txt** に以下を追加：

```
■配列・オブジェクトアクセスの安全な実装

### 配列要素へのアクセス
❌ 危険な実装：
{% if feedback_data[0].values %}
  {{ row[4] }}  # インデックスエラーの可能性
{% endif %}

✅ 安全な実装：
{% if feedback_data %}
  {% for item in feedback_data %}
    {% if item.get('values') %}
      {% for row in item.values %}
        {% if row|length > 4 %}
          {{ row[4] | default("") }}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
{% endif %}

### 必須のエラーハンドリング
1. 配列長チェック: {% if row|length > index %}
2. デフォルト値設定: {{ variable | default("デフォルト") }}
3. 型変換の明示化: {{ value|string }}
4. get()メソッドの使用: item.get('key', default_value)
```

### 2. 変数参照記法の明確化

#### 現状の問題
- 各ドキュメントで記法の説明が分散している
- 実際のエラーケースに基づいた具体例が不足

#### 改善案
**全体コーディングルール/03_変数とデータ管理.md** に以下を追加：

```markdown
## 変数参照記法 早見表（最重要）

### ノードタイプ別の正しい記法

| 使用場所 | 正しい記法 | 例 | 備考 |
|---------|-----------|-----|-----|
| template-transform内 | {{ variable }} | {{ sys.query }} | Jinja2標準記法 |
| LLMプロンプト | {{#node.field#}} | {{#start.text#}} | Dify記法 |
| answerノード | {{#node.field#}} | {{#llm.text#}} | Dify記法 |
| toolパラメータ | {{#node.field#}} | {{#transform.output#}} | Dify記法 |

### よくある間違いと修正方法

❌ template-transform内で {{#variable#}} を使用
✅ {{ variable }} に修正

❌ LLMプロンプトで {{ variable }} を使用
✅ {{#node.field#}} に修正
```

### 3. Google Sheetsデータ処理のベストプラクティス

#### 現状の問題
- Google Sheets APIの返却データ構造の理解不足
- 安全なデータアクセス方法が不明確

#### 改善案
**コンポーネント記述ルール_GoogleShpredSheet操作.txt** に以下を追加：

```
■Google Sheets APIデータ構造の理解

### batch_getの返却データ構造
{
  "valueRanges": [
    {
      "range": "Sheet1!A1:E10",
      "values": [
        ["列1", "列2", "列3", "列4", "列5"],
        ["データ1", "データ2", "データ3", "データ4", "データ5"]
      ]
    }
  ]
}

### template-transformでの安全なアクセス方法
template: |
  {% if sheet_data %}
    {% for range_data in sheet_data %}
      {% if range_data.values %}
        {% for row in range_data.values %}
          {% for index, cell in enumerate(row) %}
            セル[{{ index }}]: {{ cell | default("空") }}
          {% endfor %}
        {% endfor %}
      {% endif %}
    {% endfor %}
  {% else %}
    データが取得できませんでした
  {% endif %}
```

### 4. 品質チェックリストの強化

#### 現状の問題
- template-transformのチェック項目が不足
- 実際のエラーパターンが反映されていない

#### 改善案
**品質チェックリスト.md** に以下を追加：

```markdown
### 4.10.2 template-transformエラー防止チェック（新規追加）
- [ ] 配列アクセス前に必ず長さチェックを実施
- [ ] すべての変数参照に | default() フィルタを適用
- [ ] 比較演算を行う場合は型変換を明示（|string, |int）
- [ ] ネストした構造へのアクセスはget()メソッドを使用
- [ ] {% if %} 文で存在チェックを実施
- [ ] 変数参照記法が正しい（{{ }} のみ、{{# #}} は使用しない）
```

### 5. クラッシュ事項チェックリストの更新

#### 改善案
**クラッシュ事項チェックリスト.md** の「0.10 実際のエラー事例に基づく最重要チェック項目」を更新：

```markdown
### template-transformノードのエラー（更新版）
- [ ] **template内で{{#変数#}}を使用していない（必ず{{ 変数 }}形式）**
- [ ] **配列インデックスアクセス前に長さチェックを実施**
- [ ] **オブジェクトプロパティアクセスにget()メソッドを使用**
- [ ] **型の不一致を防ぐため、比較時に型変換を明示**
- [ ] **date関数を使用していない（代替手段を使用）**
- [ ] **空データに対するデフォルト値が設定されている**
```

### 6. エラーハンドリングのベストプラクティス（新規追加）

#### 提案
新規ファイル **コーディングルール/エラーハンドリングガイド.md** を作成：

```markdown
# Dify エラーハンドリングガイド

## template-transformノードでのエラーハンドリング

### 1. 配列・リストの安全な処理
```yaml
template: |
  {% if data_list %}
    全{{ data_list|length }}件のデータ
    {% for item in data_list %}
      {% if loop.index0 < 100 %}  # 大量データ対策
        項目{{ loop.index }}: {{ item | default("N/A") }}
      {% endif %}
    {% endfor %}
  {% else %}
    データがありません
  {% endif %}
```

### 2. ネストした構造の安全なアクセス
```yaml
template: |
  {% if response and response.get('data') %}
    {% set items = response.data.get('items', []) %}
    {% for item in items %}
      名前: {{ item.get('name', '不明') }}
      値: {{ item.get('value', 0) }}
    {% endfor %}
  {% endif %}
```

### 3. 型変換とバリデーション
```yaml
template: |
  {% set score = (input_value | int(0)) %}
  {% if score > 0 and score <= 100 %}
    スコア: {{ score }}点
  {% else %}
    無効なスコア値です
  {% endif %}
```
```

## まとめ

これらの改善により、以下の効果が期待できます：

1. **変数参照記法の混乱を解消**
   - 明確な早見表とノードタイプ別の使い分けガイド

2. **実行時エラーの削減**
   - 配列アクセスの安全性向上
   - エラーハンドリングのベストプラクティス

3. **Google Sheets連携の安定性向上**
   - データ構造の正しい理解
   - 安全なデータアクセス方法

4. **開発者の学習曲線を緩和**
   - 具体的なエラーケースと修正方法
   - 実践的なコード例の充実

これらの改善案を段階的に実装することで、Difyワークフロー開発の品質と安定性が大幅に向上することが期待されます。