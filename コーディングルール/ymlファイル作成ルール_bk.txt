# YAMLファイル作成ルール - DIFYアプリケーション開発用

## 1. 基本構造

### 1.1 必須セクション
```yaml
app:          # アプリケーション基本情報
dependencies: # 依存関係（重要：正しい形式で記述）
kind:         # アプリケーションタイプ
version:      # バージョン情報（必須: 0.3.0）
workflow:     # ワークフロー定義（advanced-chatモード用）
```

### 1.2 appセクションの必須項目
- description: アプリケーションの説明（日本語で具体的に記述）
- icon: 絵文字1文字（アプリの特徴を表現）
- icon_background: 背景色（#から始まる6桁のカラーコード）
- mode: 動作モード（advanced-chat/agent-chat）
- name: アプリ名（日本語で分かりやすく）
- use_icon_as_answer_icon: false（固定値）

### 1.3 dependenciesセクションの正しい記述方法
#### ✅ 正しい例
```yaml
# マーケットプレイスプラグインを使用する場合
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/openai:0.0.26@c1e643ac...

# 依存関係がない場合（省略）
# dependenciesセクション自体を記述しない
```

#### ❌ アンチパターン（インポート失敗の原因）
```yaml
# 空の配列 - エラーになる
dependencies: []

# 空のオブジェクト - 表示エラーになる
dependencies: {}

# 空のサブ要素を持つオブジェクト - エラーになる
dependencies:
  datasets: []
  models: []
  plugins: []
```

## 2. ワークフローセクション構成

### 2.1 features（機能設定）
#### file_upload（ファイルアップロード）
- enabled: true/false
- allowed_file_extensions: 許可する拡張子リスト（例: .PDF, .JPG）
- allowed_file_types: ファイルタイプ（image/document/audio/video）
- allowed_file_upload_methods: アップロード方法（local_file/remote_url）
- number_limits: 最大ファイル数

#### opening_statement
- 改行を含む場合は'|'を使用
- ユーザーへの最初の挨拶・説明を記載
- 機能の概要と使い方を含める

#### suggested_questions
- ユーザーへの提案質問を3-4個程度
- 具体的で実用的な例を提示

### 2.2 graph（ワークフローグラフ）
#### nodes（ノード定義）
必須ノード:
1. start_node: 開始ノード
2. 処理ノード（llm/code/if-else等）
3. answer/end: 終了ノード

ノード共通属性:
- id: ユニークな識別子（snake_case推奨）
- position: x, y座標（50単位で整列）
- type: ノードタイプ
- data: ノード固有の設定

#### edges（エッジ定義）
- source: 接続元ノードID
- target: 接続先ノードID
- sourceHandle/targetHandle: 接続ポイント
- type: custom（固定値）

## 3. ノードタイプ別設定

### 3.1 startノード
variables配列で入力変数を定義:
- label: 表示ラベル
- variable: 変数名（snake_case）
- type: 入力タイプ（text-input/select/file/paragraph）
- required: 必須フラグ
- max_length: 最大文字数

### 3.2 llmノード
- model設定: provider/name/modeを指定
- prompt_template: system/userロールでプロンプト定義
- 変数参照: {{#node_id.variable#}}形式
- completion_params: temperature等のパラメータ

### 3.3 codeノード
- code_language: python3（推奨）
- outputs: 出力変数の型定義
- variables: 入力変数のマッピング
- error_strategy: エラー時の挙動

### 3.4 if-elseノード
- cases: 条件分岐の定義
- conditions: 判定条件（comparison_operator/value）
- logical_operator: and/or

### 3.5 ⚠️ 使用禁止ノードタイプ
#### ❌ parameter-extractor（非標準ノード）
- Difyの標準ノードタイプではないため、インポートエラーの原因となる
- 代替案：llmノードやcodeノードを使用してパラメータ抽出を実装

## 4. 品質保証チェックポイント

### 4.1 構造チェック
□ app/workflow/graph階層が正しいか
□ 必須セクションがすべて存在するか
□ インデントが一貫しているか（スペース2個推奨）

### 4.2 ノード・エッジチェック
□ すべてのノードがエッジで接続されているか
□ startノードから到達可能か
□ 終了ノード（answer/end）が存在するか
□ エッジのsource/targetが正しいか

### 4.3 変数チェック
□ 変数参照の形式が正しいか（{{#node_id.variable#}}）
□ 参照先の変数が実際に存在するか
□ value_selectorの配列形式が正しいか

### 4.4 設定値チェック
□ カラーコードが正しい形式か（#XXXXXX）
□ ファイル拡張子が大文字か（.PDF, .JPG等）
□ positionの座標が適切か（重ならない配置）
□ IDがユニークか

### 4.5 日本語対応チェック
□ 日本語文字列がUTF-8で正しくエンコードされているか
□ 改行を含む文字列で適切な記法を使用しているか

## 5. 命名規則

### 5.1 ノードID
- snake_case使用（例: start_node, ocr_analysis_node）
- 機能を表す分かりやすい名前
- _nodeサフィックス推奨

#### ✅ 正しいノードIDの例
```yaml
id: start_node
id: inquiry_classification_node
id: db_check_node
id: response_generation_node
```

#### ❌ アンチパターン（表示エラーの原因）
```yaml
# 数値のみのID - UIでタイトルが表示されない
id: 1733008800001
id: 1733008800002

# 日本語を含むID - エンコーディング問題の可能性
id: 問い合わせ_node
```

### 5.2 エッジID
- 接続元と接続先を明確に示す命名
- ハイフンで区切る（例: start-classification-edge）

#### ✅ 正しいエッジIDの例
```yaml
id: start-classification-edge
id: classification-spec-edge
id: db_check-first_judgment
```

### 5.3 変数名
- snake_case使用
- 意味が明確な名前（例: applicant_name, loan_amount）

### 5.4 ファイル名
- アプリ名を含める
- 日付やバージョンを付加可能
- 日付は実在する過去の日付を使用（未来日付は避ける）

## 6. 推奨事項

### 6.1 ノード配置
- 左から右へのフロー
- x座標: 50単位で増加（50, 350, 650...）
- y座標: 機能別にグループ化

### 6.2 エラーハンドリング
- ファイル存在チェックを実装
- データ検証ノードを追加
- エラー時の分岐処理

### 6.3 ユーザビリティ
- opening_statementで使い方を明確に
- suggested_questionsで具体例を提示
- 処理状況を適切にフィードバック

## 7. よくある間違い（アンチパターン集）

### 7.1 インポート失敗の原因
1. **dependencies構造エラー**
   - ❌ 空の配列: `dependencies: []`
   - ❌ 空のオブジェクト: `dependencies: {}`
   - ❌ 空のサブ要素: `dependencies: {datasets: [], models: []}`
   - ✅ 正解: 必要なプラグイン情報を記載するか、セクション自体を省略

2. **非標準ノードタイプの使用**
   - ❌ `type: parameter-extractor`（存在しないノードタイプ）
   - ✅ 正解: `type: llm` または `type: code` で代替実装

3. **ノードID形式の問題**
   - ❌ 数値のみ: `id: 1733008800001`（UIでタイトル非表示）
   - ❌ 日本語含む: `id: 問い合わせ処理`（エンコーディング問題）
   - ✅ 正解: `id: inquiry_processing_node`

### 7.2 表示エラーの原因
1. **数値IDの使用**: ノードのタイトルが表示されない
2. **エッジIDの不整合**: 接続線が正しく描画されない
3. **position座標の重複**: ノードが重なって表示される

### 7.3 その他の一般的なミス
1. **変数参照エラー**: {{}}の中にスペースを入れない
2. **インデント不整合**: YAMLは厳密なインデント
3. **型の不一致**: 数値項目に文字列を設定
4. **未接続ノード**: すべてのノードを接続する
5. **循環参照**: エッジで無限ループを作らない

## 8. デバッグ手順

### 8.1 インポート前チェック
1. **dependencies構造の確認**
   - 空の配列/オブジェクトになっていないか
   - 必要ない場合は省略されているか

2. **ノードタイプの確認**
   - parameter-extractorなど非標準タイプを使用していないか
   - 標準タイプ（start, llm, code, if-else, answer）のみか

3. **ID形式の確認**
   - 数値のみのIDを使用していないか
   - 英数字とアンダースコアの組み合わせか

### 8.2 基本的なデバッグ手順
1. YAMLパーサーでの構文チェック
2. 必須項目の存在確認
3. ノード間の接続確認
4. 変数参照の妥当性確認
5. DIFYへのインポートテスト

## 9. 品質基準

- **完成度A**: すべてのチェック項目をクリア
- **完成度B**: 軽微な警告のみ
- **完成度C**: 動作に支障ない範囲の問題
- **完成度D**: 修正が必要な重大な問題

## 10. 参考情報

### 10.1 推奨設定
- **version**: 0.3.0（安定版）
- **mode**: advanced-chat（最も柔軟性が高い）
- **ノードタイプ**: start, llm, code, if-else, answer（標準タイプのみ使用）

### 10.2 トラブルシューティング
| 症状 | 原因 | 対策 |
|------|------|------|
| インポート失敗 | dependencies構造エラー | 空配列/オブジェクトを削除 |
| インポート失敗 | 非標準ノードタイプ | parameter-extractorをllmに変更 |
| 表示崩れ | 数値のみのノードID | 英数字の意味のあるIDに変更 |
| タイトル非表示 | ID形式の問題 | snake_case形式に修正 |

### 10.3 ベストプラクティス
1. **最小構成から始める**: 成功例をベースに段階的に機能追加
2. **標準部品の活用**: 非標準ノードタイプは使用しない
3. **命名規則の統一**: すべてのIDでsnake_caseを使用
4. **依存関係の明確化**: 不要なdependenciesは記載しない

以上のルールとアンチパターンを避けることで、Difyへの確実なインポートと正常な動作が保証されます。特にdependencies構造、ノードタイプ、ID形式の3点は、インポート成功の鍵となる要素です。