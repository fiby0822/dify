# Difyコーディングルール改善案

## 調査結果の概要

今回の調査で発見された主要な問題点：
1. template-transformノードでの配列要素への不安全なアクセス
2. 変数参照形式の混在と誤用
3. Google Sheetsデータ構造の不適切な処理
4. 複雑な条件分岐によるエラー
5. エラーハンドリングの不足

## 改善案

### 1. template-transformノードのルール強化

#### 1-1. 変数参照形式の明確化（更新）
現在のルールには記載されているが、より強調が必要：

**コンポーネント記述ルール_テンプレート.txt** に追加：
```
■変数参照形式の使い分け（最重要）
- template-transform内: {{ 変数名 }} （Jinja2記法）
- その他のノード: {{#ノード名.フィールド#}} （Dify記法）

⚠️警告: template-transform内で{{#変数#}}を使用するとエラーになります
```

#### 1-2. 配列要素への安全なアクセス（新規追加）
**コンポーネント記述ルール_テンプレート.txt** に追加：
```
■配列要素への安全なアクセス
配列要素にアクセスする前に、必ず存在確認を行う：

# 悪い例（エラーの原因）
{{ row[4] }}

# 良い例
{% if row|length > 4 %}
  {{ row[4] }}
{% else %}
  データなし
{% endif %}

# より安全な例（defaultフィルター使用）
{{ row[4]|default("データなし") }}
```

#### 1-3. Google Sheetsデータの処理パターン（新規追加）
**コンポーネント記述ルール_GoogleShpredSheet操作.txt** に追加：
```
■Google Sheetsデータ構造の安全な処理
batch_getの返却値は以下の構造を持ちます：
[{"range": "Sheet1!A1:C3", "values": [[row1], [row2], ...]}]

template-transformでの安全な処理例：
{% if sheet_data and sheet_data|length > 0 %}
  {% set first_range = sheet_data[0] %}
  {% if first_range.values is defined and first_range.values|length > 0 %}
    {% for row in first_range.values %}
      {% if row|length >= 3 %}
        名前: {{ row[0]|default("") }}
        値: {{ row[1]|default("") }}
        日付: {{ row[2]|default("") }}
      {% endif %}
    {% endfor %}
  {% else %}
    データが見つかりません
  {% endif %}
{% endif %}
```

### 2. エラーハンドリングのベストプラクティス（新規追加）

**全体コーディングルール/05_トラブルシューティング.md** に追加：
```
## template-transformノードのエラー防止策

### 配列アクセス時のチェックリスト
- [ ] 配列の存在確認（is definedまたはnull check）
- [ ] 配列の長さ確認（|length > n）
- [ ] デフォルト値の設定（|default()）
- [ ] 型変換の明示化（|string、|int）

### 複雑度の管理
- 条件分岐は最大2段階まで
- 3つ以上の条件がある場合はcodeノードを使用
- ループ内での条件分岐は1段階まで
```

### 3. 品質チェックリストの更新

**品質チェックリスト.md** に追加：
```
### 4.10.2 template-transform安全性チェック
- [ ] 配列要素へのアクセス前に長さチェックを実施している
- [ ] すべての変数参照にdefaultフィルターを適用している
- [ ] 複雑な条件分岐（3段階以上）を使用していない
- [ ] Google Sheetsデータの構造を正しく理解している
- [ ] 型の不一致を防ぐため、明示的な型変換を行っている
```

**クラッシュ事項チェックリスト.md** に追加：
```
## 0.11 template-transformノードのクラッシュ防止

### 変数参照形式のエラー
- [ ] template内で{{#変数#}}を使用していない（{{ 変数 }}が正しい）
- [ ] variables配列で使用する変数を正しく定義している

### 配列アクセスエラー
- [ ] 固定インデックスでのアクセス前に配列長をチェックしている
- [ ] row[n]のような直接アクセスを最小限にしている
- [ ] エラー時のフォールバック処理を実装している
```

### 4. toolノードのパラメータ設定（新規追加）

**クラッシュ事項チェックリスト.md** に追加：
```
### 13.10 変数参照時の引用符エラー
- [ ] tool_parametersのvalue内で変数参照を二重引用符で囲んでいない
  - NG: value: "{{#sys.query#}}"
  - OK: value: {{#sys.query#}}
```

### 5. 推奨アーキテクチャパターン（新規追加）

**全体コーディングルール/02_ワークフロー設計.md** に追加：
```
## Google Sheetsデータ処理の推奨パターン

### 複雑なデータ処理の分離
1. toolノード: Google Sheetsからデータ取得
2. codeノード: データの検証、フィルタリング、整形
3. template-transformノード: 最終的な表示形式への変換
4. LLM/answerノード: ユーザーへの出力

この分離により、各ノードの責任が明確になり、エラーの発生を防げます。
```

## 実装優先度

1. **最優先**
   - template-transformの変数参照形式の強調
   - 配列アクセスの安全性チェック
   - toolノードの引用符エラー対策

2. **高優先度**
   - Google Sheetsデータ構造の処理パターン
   - エラーハンドリングのベストプラクティス

3. **中優先度**
   - 品質チェックリストの更新
   - 推奨アーキテクチャパターン

これらの改善により、今回発見されたようなエラーの発生を大幅に削減できると期待されます。