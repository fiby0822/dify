コーディングルール改善案
生成日: 2025年1月3日
作成者: Claude AI (ultrathink mode)

==============================================================================
■ 調査結果サマリー
==============================================================================

【インポート成功_クラッシュ】
- 原因: YAMLの構文は正しいが、実行時の変数参照やデータ型の不一致が原因
- 特徴: template-transformノード内での変数参照記法の混在

【動作エラー】
- ケース1: Jinja2テンプレート処理エラー（変数参照の問題）
- ケース2: 関数オブジェクトへの不適切なアクセス（変数名の不一致）
- ケース3: 配列処理エラー（変数セレクターとtemplate内変数名の不一致）

【共通問題】
1. template-transformノード内での変数参照記法の誤り
2. variablesで定義した変数名とtemplate内での参照名の不一致
3. 変数のデータ型と期待値の不一致

==============================================================================
■ ルール改善案
==============================================================================

### 1. template-transformノードの変数参照ルールの強化

【現行ルール】
- template内では`{{#変数#}}`記法を使用しない
- 標準的なJinja2記法`{{ 変数 }}`のみを使用

【改善案】
```yaml
# ルールに以下を追加：
1. variables配列で定義した変数名は、template内でも必ず同じ名前で参照する
2. variablesのvalue_selectorまたはvariableで指定した内容は、
   必ずtemplate内の変数名と一致させる

# 具体例の追加：
variables:
  - value_selector:
      - llm_node
      - text
    variable: analysis_result  # この名前がtemplate内での参照名

template: |
  {{ analysis_result }}  # variablesで定義した名前を使用

# よくある間違いの例：
❌ 間違い：
variables:
  - variable: "{{#llm_node.text#}}"  # ここで{{#}}を使うのは間違い
    
❌ 間違い：
variables:
  - value_selector: [llm_node, text]
    variable: result
template: |
  {{ analysis }}  # 変数名が一致していない
```

### 2. 変数マッピングの明確化ルール

【新規追加ルール】
```yaml
# template-transformノードの変数マッピング必須チェック項目：

1. variablesセクションの構造確認
   - value_selector（配列形式）またはvariable（文字列形式）を使用
   - variable名は必ずtemplate内で使用する変数名と一致

2. 変数参照の完全性チェック
   - template内で使用する全ての変数がvariablesに定義されている
   - variablesに定義した全ての変数がtemplate内で使用されている

3. Google Sheets連携時の特別な注意
   - toolノードの出力は通常「json」フィールドを持つ
   - value_selector: [node_id, json]形式で参照
   - データが配列の場合は、template内で適切な存在チェックを行う
```

### 3. エラーハンドリングルールの拡充

【現行ルール】
- 基本的なエラーハンドリングのみ記載

【改善案】
```yaml
# template-transformノードのエラーハンドリング必須パターン：

1. Google Sheetsデータ参照時
template: |
  {% if data is defined and data and data[0] is defined %}
    {% if data[0].values is defined %}
      {% for row in data[0].values %}
        {{ row | join(',') }}
      {% endfor %}
    {% else %}
      データ構造が期待と異なります
    {% endif %}
  {% else %}
    データが見つかりません
  {% endif %}

2. LLM出力の参照時
template: |
  {% set result = analysis_result | default('') %}
  {% if result %}
    {{ result | trim }}
  {% else %}
    分析結果が取得できませんでした
  {% endif %}

3. JSON形式のデータ処理時
template: |
  {% set json_data = data | default('{}') %}
  {% try %}
    {% set parsed = json_data | from_json %}
    {{ parsed | tojson }}
  {% except %}
    {"error": "JSON解析エラー"}
  {% endtry %}
```

### 4. デバッグ用チェックリストの追加

【新規追加】
```markdown
## template-transformノードのデバッグチェックリスト

### 変数参照チェック
- [ ] variablesに定義した変数名とtemplate内の変数名が完全一致しているか
- [ ] {{#変数#}}記法を使っていないか（template内）
- [ ] value_selectorの配列形式が正しいか [node_id, field]

### データ型チェック
- [ ] 期待するデータ型（文字列/配列/オブジェクト）を確認したか
- [ ] 適切なdefaultフィルターを設定したか
- [ ] 配列アクセス前に存在チェックをしているか

### エラーハンドリングチェック
- [ ] undefinedやnullの場合の処理を記述したか
- [ ] 空配列や空オブジェクトの場合の処理を記述したか
- [ ] JSONパース失敗時の処理を考慮したか
```

### 5. コンポーネント記述ルール_template-transformの新規作成

【推奨】
現在、IF_ELSEのルールはあるが、template-transformの詳細ルールがないため、
専用のルールファイルを作成することを推奨：

`/コンポーネント別コーディングルール/コンポーネント記述ルール_template-transform.txt`

内容案：
- 変数参照の詳細ルール
- Jinja2テンプレート記法の制限事項
- よくある間違いとその修正方法
- Google Sheets連携時の特別な注意事項
- デバッグ方法

### 6. 品質チェックリストへの追加項目

【追加項目】
```markdown
### template-transformノード専用チェック項目
- [ ] variablesの変数名とtemplate内の変数名が一致している
- [ ] {{#変数#}}記法を使用していない（template内）
- [ ] 全ての変数参照にdefaultフィルターまたは存在チェックがある
- [ ] 配列やオブジェクトへのアクセス前に適切なチェックがある
- [ ] エラー時のフォールバック処理が実装されている
```

### 7. 開発依頼プロンプトテンプレートへの注意事項追加

【追加文言案】
```
【重要】template-transformノードを使用する場合の注意事項：
1. template内では絶対に{{#変数#}}記法を使用しないでください
2. variablesで定義した変数名は、template内でも必ず同じ名前で使用してください
3. 変数が存在しない可能性がある場合は、必ずdefaultフィルターまたは存在チェックを行ってください

例：
variables:
  - value_selector: [llm_node, text]
    variable: analysis_result

template: |
  {{ analysis_result | default('デフォルト値') }}
```

==============================================================================
■ 実装優先度
==============================================================================

1. 【最優先】template-transformノードの変数参照ルール強化
   - 既存エラーの大半がこれに起因するため

2. 【高優先】コンポーネント記述ルール_template-transformの作成
   - 専門的な記述ルールが必要

3. 【中優先】品質チェックリストへの追加
   - 開発後のチェック精度向上

4. 【低優先】デバッグチェックリストの追加
   - トラブルシューティング時の効率化

==============================================================================
■ 期待される改善効果
==============================================================================

1. template-transformノードでのエラー発生率の大幅削減（推定80%以上）
2. 変数参照ミスによるクラッシュの防止
3. 開発者の理解度向上による初回品質の向上
4. トラブルシューティング時間の短縮

==============================================================================