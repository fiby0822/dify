Dify YML コーディングルール改善案
作成日時: 2025-07-02
対象問題: ナレッジ未選択、IF_ELSEノード未接続の誤検知

===========================================
■ 改善案1: 知識検索（knowledge-retrieval）ノードのルール強化
===========================================

【現状の問題】
- YMLファイル上ではdataset_idsが正しく指定されているが、実行環境で「ナレッジが選択されていない」エラーが発生
- 暗号化されたIDと実際のナレッジベースとの関連付けに関する説明が不足

【改善提案】

1. 「コンポーネント記述ルール_知識検索.txt」への追加事項：

■実行環境での動作確認（新規追加）
知識検索ノードは、YMLファイル上で正しく設定されていても、以下の理由で実行時にエラーが発生する可能性があります：

### dataset_idsの検証チェックリスト
- [ ] 指定したdataset_idが実際にDify環境に存在するか確認
- [ ] dataset_idに対するアクセス権限があるか確認
- [ ] dataset_idの有効期限が切れていないか確認
- [ ] 暗号化されたIDが正しい形式か確認（例：64文字の英数字+記号）

### 実行環境での確認方法
1. Difyの管理画面でナレッジベースの一覧を確認
2. 使用予定のdataset_idが存在することを確認
3. テスト実行で実際にナレッジが検索されることを確認

### ダミーデータセットIDに関する警告
```yaml
# ⚠️ 警告：以下のようなサンプルIDは実環境では動作しません
dataset_ids:
  - "mUJqT0QSpLmBBBGsAg6tP+rLJoOBsXRCgClBvqhk7NKJWFKdH7o5AOBH9nG0DiXe"  # サンプルID
  
# ✅ 正解：実際のDify環境で作成されたIDを使用
dataset_ids:
  - "実際のDify環境で生成されたデータセットID"
```

### query_variable_selectorの記述形式（重要）
query_variable_selectorには複数の記述形式があります：

1. **システム変数の直接参照**（advanced-chatモード推奨）
```yaml
query_variable_selector:
  - sys
  - query
```

2. **特定ノードの変数参照**
```yaml
query_variable_selector:
  - analyze_question_node
  - text
```

3. **startノード経由のシステム変数参照**（特殊な形式）
```yaml
query_variable_selector:
  - start_node
  - sys.query  # この形式は避ける
```

推奨：形式1または2を使用。形式3は実行時エラーの原因となる可能性があります。

===========================================
■ 改善案2: IF_ELSEノードのルール改善
===========================================

【現状の問題】
- YMLファイル上では正しくELSEノード（falseケース）が接続されているが、「ELSEノード未接続」として報告される
- 実行環境での接続確認方法が不明確

【改善提案】

1. 「コンポーネント記述ルール_IF_ELSE.txt」への追加事項：

■実行環境での接続確認（新規追加）

### ELSEノード（falseケース）の接続確認方法
YMLファイル上で正しく接続されていても、以下の理由で「未接続」と判定される場合があります：

1. **エッジのsourceHandleの確認**
```yaml
# falseケースの正しい接続方法
- data:
    sourceType: if-else
    targetType: knowledge-retrieval  # または他のノードタイプ
  source: category_branch_node
  sourceHandle: "false"  # 必ず文字列の"false"を使用
  target: general_knowledge_node
```

2. **よくある接続ミス**
- sourceHandle: false（boolean型）→ NG
- sourceHandle: "False"（大文字）→ NG  
- sourceHandle: "false"（小文字の文字列）→ OK

3. **実行環境での視覚的確認**
- Difyのビジュアルエディタで接続線が表示されているか確認
- falseケースから次のノードへの線が引かれているか確認
- 接続線をクリックして、sourceHandleが"false"になっているか確認

===========================================
■ 改善案3: 品質チェックリストへの追加項目
===========================================

「品質チェックリスト.md」のセクション4.6（knowledge-retrievalノード）に以下を追加：

### 4.6.1 実行環境での動作確認（新規追加）
- [ ] 使用するdataset_idが実際のDify環境に存在することを確認
- [ ] dataset_idのアクセス権限を確認
- [ ] query_variable_selectorの形式が適切か確認
  - [ ] [sys, query]形式を使用している（推奨）
  - [ ] [start_node, sys.query]形式を使用していない（非推奨）
- [ ] テスト実行で実際にナレッジが検索されることを確認
- [ ] 検索結果が空の場合のエラーハンドリングを実装

### 4.4.1 IF_ELSEノードの実行環境確認（新規追加）
- [ ] すべてのfalseケースにエッジが接続されている
- [ ] エッジのsourceHandleが文字列の"false"になっている
- [ ] Difyビジュアルエディタで接続線が表示されている
- [ ] 各ケースから適切なノードへ接続されている
- [ ] デッドエンド（行き止まり）のケースが存在しない

===========================================
■ 改善案4: 全体コーディングルールへの追加
===========================================

「全体コーディングルール.md」のセクション12（トラブルシューティング）に以下を追加：

### 12.8 ナレッジ未選択エラーの診断
症状：YMLファイルではdataset_idsが指定されているが「ナレッジが選択されていない」エラーが発生

診断手順：
1. dataset_idの存在確認
   - [ ] Dify管理画面でナレッジベースを確認
   - [ ] 指定したIDが存在するか確認
   - [ ] アクセス権限があるか確認

2. query_variable_selectorの確認
   - [ ] 配列形式で記述されているか
   - [ ] 参照先の変数が存在するか
   - [ ] システム変数の場合は[sys, query]形式か

3. retrieval_modeの確認
   - [ ] singleまたはmultipleが正しく設定されているか
   - [ ] multipleの場合、multiple_retrieval_configが設定されているか

### 12.9 IF_ELSE未接続エラーの診断
症状：YMLファイルではfalseケースが接続されているが「ELSEノード未接続」エラーが発生

診断手順：
1. エッジ定義の確認
   - [ ] sourceHandleが文字列の"false"になっているか
   - [ ] targetとtargetHandleが正しく設定されているか
   - [ ] data.isInLoopがfalseになっているか

2. ビジュアルエディタでの確認
   - [ ] 接続線が表示されているか
   - [ ] 接続の始点と終点が正しいか
   - [ ] 他のケースとの接続が重複していないか

===========================================
■ 改善案5: クラッシュ事項チェックリストへの追加
===========================================

「クラッシュ事項チェックリスト.md」に以下のセクションを追加：

## 12. ナレッジベース関連のクラッシュ防止

### 12.1 dataset_ids関連
- [ ] **実在するdataset_idを使用している（ダミーIDは使用禁止）**
- [ ] **dataset_idsが配列形式で記述されている**
- [ ] **空配列の場合でも[]と記述されている**
- [ ] **dataset_idの形式が正しい（64文字程度の暗号化文字列）**

### 12.2 query_variable_selector関連
- [ ] **配列形式で記述されている**
- [ ] **[sys, query]形式を優先的に使用**
- [ ] **[start_node, sys.query]形式は使用していない**
- [ ] **参照先の変数が確実に存在する**

### 12.3 実行環境での確認
- [ ] **インポート後、ナレッジベースとの接続をテスト実行で確認**
- [ ] **検索結果が返ることを確認**
- [ ] **エラーメッセージを確認し、dataset_idの問題か判定**

===========================================
■ 実装優先順位
===========================================

1. 【最優先】コンポーネント記述ルール_知識検索.txtへの追加
   - 実行環境での動作確認方法を明記
   - query_variable_selectorの推奨形式を明確化

2. 【高優先】品質チェックリストへの実行環境確認項目追加
   - ナレッジベースの存在確認
   - IF_ELSEノードの接続確認

3. 【中優先】全体コーディングルールへのトラブルシューティング追加
   - エラー診断手順の明確化

4. 【低優先】クラッシュ事項チェックリストへの追加
   - 実行環境固有の問題を追記

===========================================
■ 補足：開発者への推奨事項
===========================================

1. YML作成時の注意事項として以下を追加：
   - dataset_idsにはダミーIDではなく、実際のDify環境で作成したIDを使用すること
   - テスト環境と本番環境でdataset_idが異なる場合は、環境ごとにYMLを管理すること
   - query_variable_selectorは[sys, query]形式を標準とすること

2. テスト手順の標準化：
   - YMLインポート後、必ず1回以上のテスト実行を行う
   - ナレッジ検索ノードがある場合は、実際に検索が動作することを確認
   - IF_ELSEノードがある場合は、全ての分岐をテストする

以上