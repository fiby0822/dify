コーディングルール改善案（2025年7月3日）

■調査結果の概要
本改善案は、インポート失敗、インポート成功後のクラッシュ、動作時エラーの原因分析に基づき作成されました。

■主要な問題点と改善提案

【1. IF-ELSEノードのsourceHandle設定（最重要 - クラッシュ原因）】

現状の問題：
- IF-ELSEノードからのエッジで`sourceHandle: "source"`を使用するとクラッシュ
- IF-ELSEノードのデフォルトケースで`sourceHandle: "false"`を文字列として設定している例が散見

改善案：
◆コンポーネント記述ルール_IF_ELSE.txt の改訂
- sourceHandleの設定ルールを最上部に明記
- 以下の3つのパターンのみを許可：
  1. カスタムケースID（条件に合致する場合）
  2. "true"（単純な条件の場合）
  3. "false"（デフォルト/elseケース）
- 「sourceは絶対に使用しない」という警告を追加

◆品質チェックリスト.md への追加
- セクション0（致命的エラーチェック）に以下を追加：
  「IF-ELSEノードのエッジで`sourceHandle: "source"`を使用していないか」

【2. 変数参照記法の統一（エラー頻発）】

現状の問題：
- template-transformノード内でDify記法`{{#variable#}}`を使用（Jinja2エラー）
- 同一ファイル内で記法が混在

改善案：
◆全体コーディングルール への追記強化
- 変数参照記法セクションを最上部に移動
- 以下の明確な使い分けルールを表形式で記載：
  
  | 使用場所 | 記法 | 例 |
  |---------|------|-----|
  | template-transformのtemplate内 | `{{ 変数名 }}` | `{{ sys.query }}` |
  | template-transformのtemplate内（フィルター付き） | `{{ 変数名 \| filter }}` | `{{ result \| trim }}` |
  | answerノードのanswer内 | `{{#node.field#}}` | `{{#llm.text#}}` |
  | LLMノードのprompt内 | `{{#node.field#}}` | `{{#input.query#}}` |
  | toolノードのパラメータ | `{{#node.field#}}` | `{{#transform.output#}}` |

◆コードチェック.md の拡充
- template-transformノード専用の詳細なチェックリストを作成
- Jinja2テンプレートの検証方法を記載

【3. Google Sheets操作のデータ構造理解】

現状の問題：
- batch_get APIの返却データ構造を誤解
- `data[0].values`のような誤った参照
- 配列インデックスの範囲外アクセス

改善案：
◆Google Sheets操作専用ガイドラインの新規作成
ファイル名：/コーディングルール/外部サービス連携/GoogleSheets操作ガイド.md
内容：
- batch_get APIの実際の返却形式の説明
- 正しいデータ参照パターンの例示
- 配列アクセス時の安全な方法（長さチェック等）
- 範囲指定（A1:E50等）とインデックスの対応表

◆品質チェックリスト.md への追加
- セクション8（Google Sheets）に以下を追加：
  - 「batch_getの出力を正しく参照しているか」
  - 「配列インデックスが範囲内か」
  - 「データ構造の階層を正しく理解しているか」

【4. エラーハンドリングの強化】

現状の問題：
- テンプレート内でのエラーハンドリング不足
- 配列アクセス時の境界チェック欠如

改善案：
◆テンプレート作成ガイドラインの新規作成
ファイル名：/コーディングルール/テンプレート作成ガイド.md
内容：
- 安全な配列アクセスパターン
- null/undefined チェックの方法
- Jinja2のデフォルト値設定方法
- エラー時のフォールバック処理

【5. 開発依頼文テンプレートの改善】

現状の問題：
- 生成AIが誤った記法を使用する傾向

改善案：
◆開発依頼文テンプレートへの追記
- 「変数参照記法の使い分けを厳守すること」を明記
- 「IF-ELSEノードのsourceHandleに"source"を使用しないこと」を警告
- 具体的な正しい例と間違った例を併記

【6. 自動検証ツールの改善】

改善案：
◆検証ツール（validate_dify.py）への機能追加
- IF-ELSEノードのsourceHandle検証
- 変数参照記法の一貫性チェック
- Google Sheets範囲とインデックスの整合性チェック

【7. トラブルシューティングガイドの作成】

改善案：
◆新規ファイル作成
ファイル名：/コーディングルール/トラブルシューティング/よくあるエラーと対処法.md
内容：
- 「unexpected char '#' at 7」エラーの対処法
- 「sourceHandle source not found」エラーの対処法
- Jinja2テンプレートエラーの一般的な原因と解決策
- Google Sheetsデータ参照エラーの診断方法

■実装優先順位

1. 【最優先】IF-ELSEノードのsourceHandleルール明確化（クラッシュ防止）
2. 【高優先】変数参照記法の統一ガイド作成（エラー頻発対策）
3. 【高優先】Google Sheets操作ガイドの作成（動作エラー対策）
4. 【中優先】検証ツールの機能拡張
5. 【低優先】その他のガイドライン作成

■今後の継続的改善

- エラー発生時は必ず原因分析を行い、該当するルールを更新
- 四半期ごとにルール全体の見直しを実施
- 生成AI（Claude等）の進化に合わせて、開発依頼文テンプレートを更新

以上