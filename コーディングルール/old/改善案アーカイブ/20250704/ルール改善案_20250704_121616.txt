# Dify開発ルール改善案 - 2025年1月4日 エラー分析結果反映版

## 改善案の背景
2025年1月4日に実施したエラー分析の結果、以下の問題が判明しました：
1. インポート成功後のクラッシュ（3件）
2. 動作時エラー（4件）

これらのエラーパターンを防止するため、既存ルールを以下のように改善・強化する必要があります。

---

## 1. template-transformノードのフィルター制限（新規追加）

### 1.1 使用禁止フィルター
以下のフィルターはクラッシュの原因となるため、使用を禁止します：

#### 絶対禁止フィルター
- `date()` - 日付フォーマット関数（now|dateなど）
- `length` - 文字列長取得（|lengthの形式）

#### 代替案
```yaml
# ❌ 禁止：dateフィルター
template: "処理時刻: {{ now|date('Y-m-d H:i:s') }}"

# ✅ 推奨：固定文字列または変数で日時を渡す
template: "処理時刻: {{ timestamp }}"  # 前処理で生成した値を使用

# ❌ 禁止：lengthフィルター
template: "文字数: {{ text|length }}"

# ✅ 推奨：前処理で計算
# codeノードで len(text) を計算してから渡す
```

### 1.2 最頻出エラートップ5への追加
「00_最頻出エラートップ5.md」に以下を追加：

**エラー第6位：template-transformでの制限付きフィルター使用**
- 症状：インポート成功後の即座のクラッシュ
- 原因：date、lengthフィルターの使用
- 対策：これらのフィルターは使用禁止、前処理で値を生成

---

## 2. IF-ELSEノードのcase_id命名規則（強化）

### 2.1 予約語的な値の使用禁止
以下の値をcase_idに使用することを明確に禁止：

#### 使用禁止のcase_id値
- `'true'`
- `'false'`
- `'True'`
- `'False'`
- `'default'`
- `'else'`

#### 推奨される命名パターン
```yaml
# ❌ 間違い：予約語的な値
- case_id: 'true'
- case_id: 'false'

# ✅ 正解：意味のある名前
- case_id: 'success_case'
- case_id: 'has_data'
- case_id: 'validation_passed'
- case_id: 'file_exists'
```

### 2.2 コンポーネント記述ルール_IF_ELSE.txtへの追加
既存のルールに以下の警告ボックスを追加：

```
⚠️ 重要警告：case_id命名の制限
以下の値は内部処理で特殊な扱いを受けるため、case_idに使用できません：
- 'true', 'false'（bool型として解釈される）
- 'True', 'False'（大文字版も同様）
- 'default', 'else'（予約語的扱い）

必ず具体的で意味のある名前を使用してください。
```

---

## 3. 変数参照時の配列インデックス（明確化）

### 3.1 value_selectorでの配列アクセス
配列要素へのアクセス時、インデックスは文字列として扱う必要があることを明記：

```yaml
# ❌ 間違い：数値インデックス
- value_selector:
    - sys
    - files
    - 0  # 数値型でエラー

# ✅ 正解1：文字列インデックス
- value_selector:
    - sys
    - files
    - "0"  # 文字列として指定

# ✅ 正解2：配列全体を参照（推奨）
- value_selector:
    - sys
    - files  # インデックスを省略
```

### 3.2 基本構造とエラー防止.mdへの追加
「変数参照エラー」セクションに以下を追加：

```
### 配列インデックスの型エラー
value_selectorで配列要素にアクセスする際、インデックスは必ず文字列型で指定します：
- ❌ [node, array, 0] → Input should be a valid string エラー
- ✅ [node, array, "0"] → 正常動作
- ✅ [node, array] → 配列全体を参照（推奨）
```

---

## 4. comparison_operatorの正確な値（再強調）

### 4.1 間違いやすい演算子の一覧
よくある間違いとその修正を明確に列挙：

| ❌ 間違い | ✅ 正解 | 説明 |
|-----------|---------|------|
| "is not empty" | "not empty" | isは不要 |
| "is empty" | "empty" | isは不要 |
| "is not null" | "not null" | isは不要 |
| "is null" | "null" | isは不要 |

### 4.2 エラーチェックの自動化提案
開発者向けに以下の検索パターンを提供：

```bash
# YAMLファイル内の誤った演算子を検索
grep -n "is not empty\|is empty\|is not null\|is null" *.yml

# 修正用コマンド（バックアップ後）
sed -i 's/"is not empty"/"not empty"/g' *.yml
sed -i 's/"is empty"/"empty"/g' *.yml
```

---

## 5. エラー分析結果の反映場所

### 5.1 最頻出エラートップ5への追加
- template-transformフィルター制限（第6位として追加）
- IF-ELSEのcase_id命名制限（第1位に注記追加）

### 5.2 品質チェックリストへの追加
以下の項目を追加：
- [ ] template-transformでdate()、lengthフィルターを使用していない
- [ ] IF-ELSEのcase_idに'true'、'false'等の予約語的な値を使用していない
- [ ] value_selectorの配列インデックスが文字列型である

### 5.3 クラッシュ事項チェックリストへの追加
「インポート成功後のクラッシュ」セクションに：
- template-transformでの制限付きフィルター使用チェック
- IF-ELSEのcase_id予約語チェック

---

## 6. 開発者への周知事項

### 6.1 即座に適用すべき変更
1. 既存のYMLファイルでdate、lengthフィルターを使用している箇所の修正
2. case_idが'true'/'false'になっている箇所の修正
3. 配列インデックスを数値で指定している箇所の修正

### 6.2 ツール改善提案
1. YML検証ツールにこれらのチェックを追加
2. プリコミットフックでの自動検証
3. エラーパターンの定期的な収集と分析

---

## 7. ドキュメント更新優先順位

1. **最優先**：00_最頻出エラートップ5.md
2. **高優先**：コンポーネント記述ルール_IF_ELSE.txt
3. **中優先**：品質チェックリスト.md、クラッシュ事項チェックリスト.md
4. **通常**：01_基本構造とエラー防止.md

---

## 付録：今回のエラー分析まとめ

### インポート成功_クラッシュ（3件）
- 画像認識OCRワークフロー：now|date使用
- 音声認識ワークフロー："now"|date使用
- 音声文字起こしワークフロー：text_result|length使用

### 動作エラー（4件）
- ケース1：value_selector配列インデックスの型エラー
- ケース2・3：case_id: 'true'によるbool型解釈エラー
- ケース4：logical_operator欠落 + comparison_operator誤記

これらのパターンは今後も発生する可能性が高いため、ルールでの明確な禁止と代替案の提示が必要です。