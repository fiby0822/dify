# Dify開発ルール改善案（2025年1月4日版）
## エラー分析結果に基づく重要改善事項

本文書は、実際のエラー事例（インポート失敗、クラッシュ、動作エラー）の分析結果に基づいて、
開発ルールの改善が必要な箇所をまとめたものです。

---

## 1. 【最優先】template-transformノードの変数参照ルール強化

### 現状の問題点
- インポート成功後のクラッシュの主要原因
- ノードIDの数値使用と出力参照形式の混乱
- 日付関数の誤った使用

### 改善案

#### 1.1 ノードIDの命名規則（新規追加）
```yaml
# ❌ 絶対禁止：数値のみのID
id: '1735890300001'

# ✅ 必須：意味のあるsnake_case
id: 'result_formatter_node'
```

**追加ルール：**
- すべてのノードIDは必ず意味のある英語のsnake_caseで命名
- 数値のみ、またはタイムスタンプベースのIDは使用禁止
- 理由：数値IDは`{{#1735890300001.output#}}`のような参照でパースエラーを引き起こす

#### 1.2 template-transform内での日付処理（修正）
```yaml
# ❌ エラー：nowに引用符を付ける
{{ "now"|date }}
{{ "now"|date("Y-m-d H:i:s") }}

# ✅ 正解：nowは引用符なし
{{ now }}  # 現在時刻のタイムスタンプ
{{ now|date("Y-m-d H:i:s") }}  # フォーマット付き

# 注意：Difyのtemplate-transformでは、dateフィルターのサポートが限定的
# 推奨：日付処理はcodeノードで実行
```

---

## 2. 【重要】value_selectorの配列インデックス型

### 現状の問題点
- ケース1のエラー：配列インデックスが整数型で指定されている

### 改善案
```yaml
# ❌ エラー：整数型のインデックス
value_selector:
  - sys
  - files
  - 0  # 整数型はエラー

# ✅ 正解：文字列型のインデックス
value_selector:
  - sys
  - files
  - "0"  # 文字列として指定
```

**追加ルール：**
- value_selector内の配列インデックスは必ず文字列型で指定
- 数値に見える値でも必ず引用符で囲む

---

## 3. 【重要】IF-ELSEノードのcase_id制限

### 現状の問題点
- ケース2、3で'true'/'false'がブール値として解釈される

### 改善案

#### 3.1 予約語的な値の使用禁止リスト（新規）
```yaml
# ❌ 使用禁止のcase_id値
- 'true'   # ブール値として解釈される
- 'false'  # ブール値として解釈される  
- 'null'   # null値として解釈される可能性
- 'none'   # null/Noneとして解釈される可能性

# ✅ 推奨されるcase_id命名
- 'success_case'
- 'error_case'
- 'has_result'
- 'no_result'
- 'condition_met'
```

#### 3.2 sourceHandleの注意事項（明確化）
```yaml
# エッジ定義での注意
- sourceHandle: 'success_case'  # case_idと完全一致
- sourceHandle: 'false'         # デフォルトケースは文字列の'false'（予約）
```

---

## 4. 【重要】比較演算子の正確な値リスト

### 現状の問題点
- ケース4で'is not empty'という存在しない演算子を使用

### 改善案

#### 4.1 比較演算子の完全リスト（更新）
```yaml
# 文字列・存在チェック（よく間違えるもの）
✅ "empty"        # ❌ "is empty"ではない！
✅ "not empty"    # ❌ "is not empty"ではない！
✅ "null"         # ❌ "is null"ではない！
✅ "not null"     # ❌ "is not null"ではない！

# その他の有効な演算子
- "contains"
- "not contains"
- "start with"
- "end with"
- "is"
- "is not"
- "in"
- "not in"
- "="
- "!="  # ASCIIのみ
- ">"
- "<"
- ">="  # ASCIIのみ
- "<="  # ASCIIのみ
```

**エラー防止チェッカー（追加提案）：**
YAMLファイル内で以下のパターンを検索し、エラーを事前に発見：
- `"is empty"` → `"empty"`に修正
- `"is not empty"` → `"not empty"`に修正

---

## 5. 【必須】logical_operatorの省略禁止ルール強化

### 現状の問題点
- ケース4でlogical_operatorが欠落（最頻出エラー）

### 改善案

#### 5.1 自動チェックルール（新規提案）
```yaml
# IF-ELSEノードの必須構造
cases:
  - case_id: "any_case"
    conditions:
      - variable_selector: [node, field]
        comparison_operator: "contains"
        value: "test"
    logical_operator: "and"  # ← 絶対必須！条件が1つでも省略禁止
```

**開発時の確認手順：**
1. すべてのIF-ELSEノードをリストアップ
2. 各caseにlogical_operatorが存在することを確認
3. YAMLバリデーターでの自動チェックを推奨

---

## 6. 【新規】プロバイダー指定の統一ルール

### 現状の問題点
- LLMノードでproviderの指定方法が不統一

### 改善案
```yaml
# LLMノードのprovider指定
model:
  provider: langgenius/openai/openai  # フルパス形式を推奨
  # または
  provider: openai  # シンプル形式（動作は環境依存）
```

---

## 7. 【新規】音声認識ノードの特別ルール

### エラー分析から判明した注意点
- file参照が不完全（[sys, files]で配列インデックスなし）
- 一部の環境では動作するが、推奨されない

### 改善案
```yaml
# ✅ 推奨：明示的なインデックス指定
file:
  type: variable
  value:
    - sys
    - files
    - "0"  # 文字列として指定

# △ 非推奨：インデックスなし（環境依存）
file:
  type: variable
  value:
    - sys
    - files
```

---

## 8. チェックリストへの追加項目

### 8.1 品質チェックリスト追加項目
- [ ] すべてのノードIDがsnake_case形式（数値のみ禁止）
- [ ] value_selectorの配列インデックスが文字列型
- [ ] IF-ELSEのcase_idに'true'/'false'を使用していない
- [ ] 比較演算子に'is'プレフィックスを付けていない

### 8.2 クラッシュ事項チェックリスト追加項目
- [ ] template-transform内でnowに引用符を付けていない
- [ ] 数値のみのノードIDを使用していない
- [ ] answerノードで数値IDの参照をしていない

### 8.3 コードチェックリスト追加項目
- [ ] `"is empty"`パターンの検索と修正
- [ ] `"is not empty"`パターンの検索と修正
- [ ] logical_operatorの存在確認スクリプト実行

---

## 9. 開発プロセスの改善提案

### 9.1 エラー防止のための事前チェック
1. **命名規則チェッカー**：ノードID生成時に数値のみを拒否
2. **演算子バリデーター**：有効な比較演算子のみを許可
3. **必須フィールドチェッカー**：logical_operatorの自動追加提案

### 9.2 テンプレートの更新
- IF-ELSEノードのテンプレートにlogical_operatorを事前に含める
- value_selectorのサンプルで文字列インデックスを明示

---

## 10. ドキュメント更新箇所

### 10.1 「最頻出エラートップ5」への追加
1. value_selectorの配列インデックスは文字列型
2. IF-ELSEのcase_idに'true'/'false'使用禁止
3. 比較演算子の'is'プレフィックス禁止
4. ノードIDの数値のみ使用禁止
5. template-transform内でのnowの引用符禁止

### 10.2 コンポーネント別ルールの更新
- IF_ELSEルール：case_id制限事項の追加
- template-transformルール：日付処理の注意事項追加
- 全般：value_selector仕様の明確化

---

## まとめ

今回のエラー分析により、以下の点が明確になりました：

1. **曖昧な仕様の明確化が必要**
   - 配列インデックスの型
   - 予約語的な値の扱い
   - 比較演算子の正確な形式

2. **エラーメッセージからの学習**
   - 実際のエラーメッセージを元にルールを具体化
   - よくある間違いパターンの文書化

3. **自動化可能な部分の特定**
   - 命名規則チェック
   - 必須フィールドの検証
   - 無効な値の事前検出

これらの改善により、開発時のエラーを大幅に削減できると期待されます。

#1 times.