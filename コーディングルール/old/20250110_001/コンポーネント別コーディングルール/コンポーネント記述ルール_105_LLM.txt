コンポーネント記述ルール: LLM

■ブロック概要
大規模言語モデル（LLM）を使用して、入力に対する応答を生成するノード。プロンプトエンジニアリングにより、様々なタスクを実行できる最も汎用的なコンポーネント。

■必須パラメータ（詳細）
- id: 意味のある名前（例: "factual_llm_node", "analysis_llm_node"）
- type: "custom"（外側のtype属性。固定値）
- data.type: "llm"（データ内のtype属性。固定値）
- position: x, y座標
- positionAbsolute: positionと同じ値を設定
- selected: false（固定値）
- sourcePosition: "right"（推奨）
- targetPosition: "left"（推奨）
- height: 数値（通常98）
- width: 数値（通常244）
- data:
  - model: モデル設定
    - provider: プロバイダー名（例: "openai"）（推奨：シンプルな形式）
    - name: モデル名（例: "gpt-4o"）
    - mode: 動作モード（"chat"推奨）
  - prompt_template: プロンプトテンプレート
    - id: ユニークID（必須）
    - role: ロール（"system"または"user"）
    - text: プロンプト内容
  - structured_output_enabled: false（必須、デフォルトfalse）
  - vision:
    - enabled: false（必須、デフォルトfalse）
  - variables: []（オプション、使用しない場合は省略可）
  - context:（推奨、一部の環境で必要）
    - enabled: false
    - variable_selector: []


■■memory設定に関する最重要注意事項（エラー頻発箇所）

⚠️ memory設定は最もエラーが発生しやすい箇所です ⚠️

【推奨対応】
1. **memory機能を使用しない場合（99%のケースで推奨）**
   → memoryフィールド自体を完全に省略する

2. **memory機能を使用する場合（1%の特殊ケース）**
   → 以下の完全な構造を必ず使用：
   ```yaml
   memory:
     enabled: false
     window:         # ★必須★
       enabled: false
       size: 10      # ★必須★
   ```

【絶対にやってはいけないこと】
❌ 簡略記法: memory: { enabled: false }
❌ windowフィールドの省略
❌ 中途半端な構造での記述

■■使用禁止フィールド（クラッシュの原因）
以下のフィールドは使用しないでください：
- tools: ツール機能（サポートされていない）
- その他リストにないフィールド

■オプションパラメータ
- completion_params: 生成パラメータ
  - temperature: 温度（0-1、デフォルト0.7）
  - max_tokens: 最大トークン数
  - top_p: 多様性パラメータ

■入力
プロンプト内で変数参照を通じて他ノードからのデータを受け取る：
- {{#node_id.variable_name#}}形式での参照


■出力
- text: 生成されたテキスト出力
- usage: トークン使用量情報（オプション）

■使用例（完全版）
```yaml
- data:
    model:
      provider: openai
      name: gpt-4o
      mode: chat
    prompt_template:
      - id: system-prompt-1   # 必須：ユニークID
        role: system
        text: |
          あなたは優秀なカスタマーサポート担当者です。
          以下のルールに従って回答してください：
          1. 丁寧で分かりやすい言葉使い
          2. 具体的な解決策の提示
          3. 必要に応じて追加情報の確認
      - id: user-prompt-1     # 必須：ユニークID
        role: user
        text: |
          お問い合わせ内容：
          {{#start_node.user_query#}}
          
          添付ファイル内容：
          {{#document_extractor.text#}}
    completion_params:
      temperature: 0.7
      max_tokens: 1000
    structured_output_enabled: false  # 必須
    vision:
      enabled: false                  # 必須
    variables: []                     # オプション
    context:                          # 推奨
      enabled: false
      variable_selector: []
    # memory設定は省略（99%のケースで推奨）
    # どうしても必要な場合のみ、以下の完全構造を使用：
    # memory:
    #   enabled: false
    #   window:           # 必須
    #     enabled: false
    #     size: 10        # 必須
    # 共通設定
    desc: "ノードの説明"
    selected: false
    title: "ノードタイトル"
    type: llm                         # data内にtype定義
  # ノードレベルの設定
  height: 98              # 必須
  id: llm_node_id
  position:
    x: 350
    y: 200
  positionAbsolute:       # 必須
    x: 350
    y: 200
  selected: false         # 必須
  sourcePosition: right   # 必須
  targetPosition: left    # 必須
  type: custom            # 必須（"custom"固定）
  width: 244              # 必須
```


■注意事項
- プロンプトテンプレートは配列形式で記述
- systemロールとuserロールの両方を適切に使用
- 変数参照の形式を正確に（{{#node_id.variable#}}）
- temperatureはタスクに応じて調整（事実ベース：0.0-0.3、創造的：0.7-1.0）

■変数参照パスの検証（重要）
プロンプト内での変数参照は以下の点を必ず確認：
- 参照先ノードが実在するか
- 参照先ノードが参照元より前に実行されるか
- 並列実行パスからの変数参照をしていないか
- オプショナルノードからの参照にはデフォルト値を設定
- sys.query変数は必ずstartノードから参照（advanced-chatモード）

■ベストプラクティス
- systemロールでAIの役割と制約を明確に定義
- 出力形式を具体的に指定（JSON、マークダウンなど）
- エラーケースの指示も含める
- プロンプトは簡潔で明確に
- 必要に応じてFew-shot例を含める
- 出力の品質を上げるための指示を含める

■プロバイダー設定の注意
- provider: "openai"（推奨：シンプルな形式）
- provider: "anthropic"（Claudeを使用する場合）
- 詳細なパス（"langgenius/openai/openai"など）は使用しない

■使用上の注意
1. アプリケーションモードの選択
   - 通常は`app.mode: advanced-chat`を使用
   - `workflow`モードは特殊な要件がある場合のみ使用

2. 複数プロバイダーの使用
   - 同一ファイル内で異なるプロバイダー（openai、anthropic等）を混在させることは可能
   - ただし、各プロバイダーの制約事項に注意

3. メモリ機能の使用
   - 99%のケースでmemoryフィールド自体を省略することを推奨
   - memory.enabled: trueは慎重に使用（パフォーマンスへの影響あり）
   - 使用する場合はwindowフィールドが必須

■advanced-chatモードでの注意事項
1. startノードの変数定義
   - advanced-chatモードでは、startノードのvariablesは必ず空配列[]にする
   - ユーザー入力はシステムが自動的に管理
   - 変数を定義すると実行時エラーになる

2. ユーザー入力の参照方法
   - advanced-chatモードでは、システムが提供する変数を使用
   - 例: {{#sys.query#}} または {{#sys.user_query#}}
   - startノードからの変数参照は使用しない

3. workflowモードとの違い
   - workflowモード: startノードで変数定義可能
   - advanced-chatモード: startノードで変数定義不可

■よくある間違い（クラッシュの原因）
1. 外側のtype属性をdata.typeと同じにする（正しくは"custom"固定）
2. positionAbsoluteを省略する
3. height/widthを省略する
4. prompt_templateのid属性を省略する
5. structured_output_enabledやvision.enabledを省略する（false必須）
6. contextフィールドを省略する（一部環境では必要）
7. providerに詳細なパスを使用（例："langgenius/openai/openai"）
8. YAMLコメントをノード定義内に挿入する（クラッシュの原因）
9. **致命的：YAMLファイルの最上位構造を誤る**
   - featuresを最上位に配置（workflow.featuresが正しい）
   - dependencies、kind、versionを省略
   - app.use_icon_as_answer_iconを省略
10. **memory設定の不完全な記述（★最頻出エラー★）**
    - 簡略記法（memory: { enabled: false }）を使用する（動作しない）
    - windowフィールドを省略する（必須フィールド）
    - 症状: "memory.window Field required"エラー
    - 対策: memoryフィールドを完全に省略するか、完全な構造を使用