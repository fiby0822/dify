コンポーネント記述ルール: IF/ELSE

■ブロック概要
条件分岐を実現するノード。変数の値や状態に基づいて、ワークフローの処理経路を分岐させる。複雑な条件ロジックの実装に使用。

■必須パラメータ（ノードレベル）
- id: 意味のある名前（例: "condition_check_node"）
- type: "custom"（外側のtype属性。固定値）
- position: x, y座標
- positionAbsolute: positionと同じ値を設定
- selected: false（固定値）
- sourcePosition: "right"（推奨）
- targetPosition: "left"（推奨）
- height: 数値（通常154-250、条件数に応じて調整）
- width: 数値（通常244）
- data:
  - type: "if-else"（データ内のtype属性。固定値）
  - cases: 条件ケースの配列
    - id: ケースID（例: "case_1"）※sourceHandleとして使用
    - case_id: ケースID（idと同じ値を設定）※必須
    - conditions: 条件配列
      - id: 条件ID（オプション）
      - variable_selector: 変数の参照パス（配列形式）
      - comparison_operator: 比較演算子
      - value: 比較値
      - varType: 変数タイプ（オプション、例: "file"）
    - logical_operator: 論理演算子（"and"または"or"）
  - selected: false（必須）
  - title: ノードタイトル（必須）
  - desc: ノードの説明（推奨）


■オプションパラメータ
- default_case: デフォルトケースの設定

■入力
variable_selectorで指定された変数の値


■出力
条件にマッチしたケースのエッジへ分岐

■比較演算子の種類（正確な値）
文字列比較:
- "contains": 部分一致
- "not contains": 部分不一致
- "start with": 前方一致
- "end with": 後方一致
- "is": 完全一致
- "is not": 不一致
- "in": リスト内存在
- "not in": リスト内非存在
- "all of": すべて含む

数値比較:
- "=": 等しい
- "≠": 等しくない（Unicodeの不等号）
- ">": より大きい
- "<": より小さい
- "≥": 以上（Unicodeの大なり等号、">="ではない）
- "≤": 以下（Unicodeの小なり等号、"<="ではない）

NULL/存在チェック:
- "empty": 空
- "not empty": 空でない
- "null": NULL
- "not null": NULLでない
- "exists": 存在する
- "not exists": 存在しない

■使用例（完全版）
```yaml
- data:
    type: if-else  # data内のtype
    cases:
      # ファイル存在チェック
      - id: file_exists_case
        case_id: file_exists_case  # 必須：idと同じ値
        conditions:
          - id: file_check  # オプション
            variable_selector:
              - file_check_node
              - file_exists
            comparison_operator: is
            value: "true"
            varType: file  # オプション
        logical_operator: and
      
      # 数値比較の例（Unicode使用）
      - id: high_score_case
        case_id: high_score_case  # 必須：idと同じ値
        conditions:
          - id: score_check  # オプション
            variable_selector:
              - validation_node
              - score
            comparison_operator: "≥"  # Unicodeの大なり等号
            value: 80
        logical_operator: and
      
      # 複数条件の例
      - id: valid_data_case
        case_id: valid_data_case  # 必須：idと同じ値
        conditions:
          - variable_selector:
              - validation_node
              - score
            comparison_operator: ">"
            value: 80
          - variable_selector:
              - validation_node
              - status
            comparison_operator: is
            value: "approved"
        logical_operator: and
      
      # 文字列の部分一致
      - id: contains_keyword
        case_id: contains_keyword  # 必須：idと同じ値
        conditions:
          - variable_selector:
              - analysis_node
              - category
            comparison_operator: contains
            value: "緊急"
        logical_operator: and
    desc: "条件チェック"
    selected: false  # 必須
    title: "条件分岐"  # 必須
  height: 198  # 必須
  id: condition_check_node
  position:
    x: 650
    y: 200
  positionAbsolute:  # 必須
    x: 650
    y: 200
  selected: false  # 必須
  sourcePosition: right  # 必須
  targetPosition: left  # 必須
  type: custom  # 必須：外側は"custom"
  width: 244  # 必須
```


■注意事項
- 各ケースにidとcase_idの両方が必須（同じ値を設定）
- 比較演算子で数値比較する場合はUnicode文字を使用（"≥"、"≤"、"≠"）
- 外側のtype属性は必ず"custom"、data.typeが"if-else"
- 論理演算子はand/orのみ
- エッジ接続で分岐先を正しく設定する必要がある（sourceHandleにはケースのidを使用）

■よくある間違い（エラーの原因）
1. case_idフィールドの欠落（idだけでは不十分）
2. 比較演算子でASCII文字を使用（">="ではなく"≥"を使用）
3. 外側のtype属性を"if-else"にする（正しくは"custom"）
4. height/widthの省略
5. positionAbsoluteの省略
6. data.selectedやdata.titleの省略

■ベストプラクティス
- 条件は明確で理解しやすく記述
- 複雑な条件は複数のif-elseノードに分割
- デフォルトケースを考慮（falseハンドルを使用）
- ケースIDは意味が分かる名前に
- エッジのsourceHandleで分岐先を明確に
- 数値比較の演算子はコピー＆ペーストで正確に入力