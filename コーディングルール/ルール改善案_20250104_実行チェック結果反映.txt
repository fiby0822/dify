# コーディングルール改善案 - 2025年1月4日実行チェック結果反映版

## 概要
動作エラーケース1〜4の分析結果を踏まえ、コーディングルールの改善案を以下に提示します。
特に頻出エラーとなっている項目について、より明確で実践的なルールへの改善を提案します。

## 1. IF-ELSEノードに関する改善案

### 1.1 比較演算子の正確な値の明記（最重要）

**現状の問題点：**
- 'is not empty'という誤った値の使用が頻発（ケース1、4）
- 正しい値が 'not empty' であることが明確でない

**改善案：**
コンポーネント記述ルール_IF_ELSE.txtの45行目以降を以下のように修正：

```
■比較演算子の種類（正確な値）

★最重要：以下の値は一字一句正確に記述すること★

NULL/存在チェック（頻出エラー注意）:
- "empty": 空（値が空文字列または未定義）
- "not empty": 空でない ★'is not empty'は誤り！★
- "null": NULL
- "not null": NULLでない
- "exists": 存在する
- "not exists": 存在しない

❌ よくある間違い：
- "is not empty" → 正しくは "not empty"（'is'は不要）
- "is empty" → 正しくは "empty"（'is'は不要）
```

### 1.2 logical_operatorの必須性の最優先強調

**現状の問題点：**
- logical_operatorの欠落がケース4で発生
- 条件が1つの場合でも必須であることが十分に強調されていない

**改善案：**
コンポーネント記述ルール_IF_ELSE.txtの27-29行目を以下のように修正：

```
    - logical_operator: 論理演算子（"and"または"or"）
      ※★絶対必須★ 条件が1つの場合でも省略不可
      ※★最頻出エラー★ このフィールドの欠落がエラーの80%を占める
      ※★重要★ conditionsが空配列でも、1つでも、複数でも、必ずlogical_operatorは必須
```

また、品質チェックリスト.mdとクラッシュ事項チェックリスト.mdの両方で、IF-ELSEノードチェック項目の最上位に配置。

## 2. Vision機能（画像認識）に関する改善案

### 2.1 variable_selector設定の必須化

**現状の問題点：**
- ケース2、3でvision.configs.variable_selectorが空配列のままエラー発生
- 画像ファイルの参照設定が必要であることが不明確

**改善案：**
全体コーディングルール.mdに以下のセクションを追加：

```
### Vision機能（画像認識）使用時の必須設定

画像認識を使用するLLMノードでは、以下の設定が必須です：

```yaml
vision:
  enabled: true
  configs:
    detail: high  # または low
    variable_selector:  # ★必須：画像ファイルの参照先★
    - sys          # システム変数の場合
    - files        # ファイル参照
    # または
    - start        # startノードで定義した場合
    - file         # file変数
```

❌ よくある間違い：
```yaml
vision:
  enabled: true
  configs:
    detail: high
    variable_selector: []  # 空配列はエラー！
```
```

## 3. 品質チェックリストの優先順位見直し

### 3.1 最頻出エラーの最上位配置

**改善案：**
品質チェックリスト.mdの構成を以下のように再編成：

```
## 0. 致命的エラーチェック（最優先）

### 0.6 エラー頻発箇所の特別チェック（最優先）

#### IF/ELSEノード（最重要チェック）
- [ ] **★最優先★ 全てのケースにlogical_operatorが設定されている**
- [ ] **★重要★ comparison_operatorの値が正確（'is not empty'ではなく'not empty'）**
- [ ] **★重要★ 比較演算子にUnicode文字（≥、≤、≠）を使用していない**

#### Vision機能（画像認識）
- [ ] **★必須★ vision.configs.variable_selectorに画像ファイルの参照が設定されている**
- [ ] **★必須★ variable_selectorが空配列[]になっていない**
```

## 4. 新規追加：エラー防止のためのクイックリファレンス

**改善案：**
コーディングルール/全体コーディングルール/00_index.mdに以下を追加：

```
## クイックリファレンス：最頻出エラー防止

### 1. IF-ELSEノード
```yaml
# 必須設定（条件が1つでも必要）
cases:
  - case_id: 'case_1'
    conditions:
      - variable_selector: [node, value]
        comparison_operator: "not empty"  # 'is not empty'ではない！
        value: ''
    logical_operator: and  # 絶対必須！
```

### 2. Vision機能
```yaml
vision:
  enabled: true
  configs:
    detail: high
    variable_selector:  # 必須！
    - sys
    - files
```
```

## 5. コンポーネント記述ルールの統一フォーマット提案

**現状の問題点：**
- 各コンポーネントのルールで必須項目の強調度が異なる
- エラー例と正しい例の対比が不明確

**改善案：**
すべてのコンポーネント記述ルールに以下の統一セクションを追加：

```
■エラー防止チェックリスト（必ず確認）
□ [最重要項目1]
□ [最重要項目2]
...

■よくあるエラーと修正方法
| エラー内容 | 原因 | 修正方法 |
|-----------|------|---------|
| comparison_operator literal_error | 'is not empty'使用 | 'not empty'に修正 |
| logical_operator Field required | logical_operator欠落 | logical_operator: and追加 |
```

## 6. 実装優先順位

1. **即時対応（優先度：最高）**
   - IF-ELSEノードのcomparison_operator値の明確化
   - logical_operator必須性の強調
   - Vision機能のvariable_selector設定ガイド

2. **短期対応（優先度：高）**
   - 品質チェックリストの再編成
   - クイックリファレンスの追加

3. **中期対応（優先度：中）**
   - コンポーネント記述ルールの統一フォーマット化
   - エラー事例集の作成

## 7. 効果測定指標

改善後の効果は以下の指標で測定：
- IF-ELSEノードのcomparison_operatorエラー発生率
- logical_operator欠落エラー発生率
- Vision機能のvariable_selector関連エラー発生率
- 全体的なインポート成功率
- 動作エラー発生率

これらの改善により、特に頻出している4つのエラーパターンの発生を大幅に削減できると期待されます。