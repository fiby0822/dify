# Difyコーディングルール改善案
## 作成日: 2025-07-03
## 目的: エラー分析結果に基づくルール改善

## 1. コードチェック.mdの大幅拡充

### 現状の問題点
- 現在1行しか記載がなく、具体的なチェック項目が不足
- template-transformノードのJinja2コーディングチェックが不完全

### 改善案
以下の内容をコードチェック.mdに追加：

```markdown
# Difyワークフローコードチェックリスト

## 1. template-transformノードのJinja2コーディングチェック

### 必須チェック項目
- [ ] パイプ記号とフィルター名の間にスペースがない
  - NG: `{{ variable | filter }}`
  - OK: `{{ variable|filter }}`
  
- [ ] 変数参照が{{ 変数 }}形式
  - NG: `{{#variable#}}` （template内では使用禁止）
  - OK: `{{ variable }}`
  
- [ ] 配列アクセス前に存在チェック実施
  ```jinja2
  {% if data and data|length > 0 %}
    {{ data[0] }}
  {% endif %}
  ```
  
- [ ] default()フィルタの適切な使用
  - OK: `{{ variable|default("") }}`
  - OK: `{{ variable|default([]) }}`
  
- [ ] joinフィルタ使用時のスペースなし確認
  - NG: `{{ row | join(',') }}`
  - OK: `{{ row|join(',') }}`

### Google Sheets関連の必須チェック
- [ ] batch_getの戻り値構造を正しく参照
  - NG: `sheet_data[0].values`
  - NG: `output.data`
  - OK: `sheet_data[0]["valueRanges"][0]["values"]`
  
- [ ] ブラケット記法の使用（ドット記法禁止）
  - NG: `data.values` 
  - OK: `data["values"]`

### 変数定義チェック
- [ ] variablesで定義時にvalue_type指定
  ```yaml
  variables:
  - value_selector:
    - batch_get_node
    - json
    value_type: array[object]  # 必須
    variable: sheet_data
  ```

## 2. IF-ELSEノードチェック

### 条件式チェック
- [ ] 文字列booleanとの比較を避ける
  - NG: `value: "false"`
  - OK: `value: false` または `contains`演算子使用

### 構造チェック
- [ ] logical_operatorが存在（単一条件でも必須）
- [ ] すべてのcaseにcase_idが設定されている
- [ ] elseIfまたはelseが存在する

## 3. Difyツールチェック

### toolsパラメータチェック
- [ ] すべてのパラメータがtype/value形式
  ```yaml
  # NG
  tool_parameters:
    spreadsheetId: "シートID"
  
  # OK
  tool_parameters:
    spreadsheetId:
      type: mixed
      value: "シートID"
  ```

### プロバイダー設定チェック
- [ ] providerとtool_nameが正確に一致
  - Google Sheets: `provider: google` 
  - 正しいツール名を使用

## 4. 一般的なチェック項目

### YAMLフォーマット
- [ ] インデントが一貫している（2スペース推奨）
- [ ] 文字列値が適切にクォートされている
- [ ] 特殊文字がエスケープされている

### エラーハンドリング
- [ ] 空データのケースが考慮されている
- [ ] エラー時のデフォルト値が設定されている
- [ ] 適切なエラーメッセージが設定されている
```

## 2. 「最頻出エラーTOP3」の更新

### 現状
既存の最頻出エラーリストがあるが、実際の発生頻度に基づく更新が必要

### 改善案
以下を追加または更新：

```markdown
## 最頻出エラーTOP5（2025年7月時点）

1. **Google Sheets APIレスポンス構造の誤解（40%）**
   - エラー: `TypeError: 'builtin_function_or_method' object is not iterable`
   - 原因: `sheet_data[0].values` のようなドット記法使用
   - 解決: `sheet_data[0]["valueRanges"][0]["values"]` を使用

2. **Jinja2フィルターのスペース問題（25%）**
   - エラー: `Invalid template`
   - 原因: `{{ variable | filter }}` のスペース
   - 解決: `{{ variable|filter }}` （スペースなし）

3. **template内での{{#変数#}}使用（20%）**
   - エラー: 変数が認識されない
   - 原因: Dify記法とJinja2記法の混在
   - 解決: template内では`{{ 変数 }}`を使用

4. **value_type未指定（10%）**
   - エラー: 変数の型不一致
   - 原因: template-transformのvariables定義でvalue_type省略
   - 解決: `value_type: array[object]`等を明示的に指定

5. **ツールパラメータの直接値指定（5%）**
   - エラー: Invalid tool parameters
   - 原因: `spreadsheetId: "ID"` のような直接指定
   - 解決: type/value形式を使用
```

## 3. エラー事例集の新規追加

### 改善案
新規ファイル「エラー事例集.md」を作成し、実際のエラーメッセージと対処法を記載

```markdown
# Difyワークフローエラー事例集

## エラー事例1: TypeError: 'builtin_function_or_method' object is not iterable

### エラーメッセージ
```
TypeError: 'builtin_function_or_method' object is not iterable in 行5
```

### 発生原因
Jinja2テンプレート内で `data.values` のようなドット記法を使用した場合、
`values`がPythonの辞書メソッドとして解釈される。

### 解決方法
```jinja2
# NG
{% for row in sheet_data[0].values %}

# OK  
{% for row in sheet_data[0]["valueRanges"][0]["values"] %}
```

### 予防策
- 常にブラケット記法を使用
- 特に`values`, `items`, `keys`などのメソッド名と重複する可能性のあるキーは注意

## エラー事例2: Invalid template syntax

### エラーメッセージ
```
Invalid template: unexpected ' '
```

### 発生原因
Jinja2フィルターでパイプ記号とフィルター名の間にスペースがある。

### 解決方法
```jinja2
# NG
{{ data | join(',') }}

# OK
{{ data|join(',') }}
```

### 予防策
- すべてのフィルター使用箇所でスペースなしを徹底
- VSCodeなどのエディタでJinja2拡張機能を使用して構文チェック

## エラー事例3: KeyError in template

### エラーメッセージ
```
KeyError: 'data' in template line 3
```

### 発生原因
存在しないキーへのアクセス、またはGoogle Sheets APIの戻り値構造の誤解。

### 解決方法
```jinja2
# NG - output.dataは存在しない
{% for row in output.data %}

# OK - 正しいパスを使用
{% set rows = sheet_data[0]["valueRanges"][0]["values"] %}
{% for row in rows %}

# より安全な方法
{% if sheet_data and sheet_data[0] and sheet_data[0]["valueRanges"] %}
  {% set rows = sheet_data[0]["valueRanges"][0]["values"]|default([]) %}
{% else %}
  {% set rows = [] %}
{% endif %}
```

### 予防策
- APIドキュメントで正確な戻り値構造を確認
- defaultフィルタを活用してエラーを回避
- 存在チェックを適切に実施
```

## 4. Google Sheets操作専用ガイドの強化

### 改善案
「06_外部連携とツール.md」のGoogle Sheetsセクションに以下を追加：

```markdown
### Google Sheets操作の完全ガイド

#### 1. batch_get操作の完全な例

```yaml
# 正しい実装例
- data:
    type: node
    outputs:
    - value_selector:
      - batch_get_node
      - json
  id: data_processor_node
  label: データ処理
  position:
    x: 400
    y: 200
  selected: false
  title: データ処理
  type: template-transform
  variables:
  - value_selector:
    - batch_get_node
    - json
    value_type: array[object]  # 重要：必ず指定
    variable: sheet_data
  template: |-
    {% set all_data = [] %}
    {% if sheet_data and sheet_data[0] and sheet_data[0]["valueRanges"] %}
      {% set rows = sheet_data[0]["valueRanges"][0]["values"]|default([]) %}
      {% for row in rows %}
        {% if row and row|length > 0 %}
          {% set _ = all_data.append({
            "col1": row[0]|default(""),
            "col2": row[1]|default(""),
            "col3": row[2]|default("")
          }) %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ all_data|tojson }}
```

#### 2. よくある実装ミスと修正方法

| ミスのパターン | 修正前 | 修正後 |
|------------|--------|--------|
| ドット記法使用 | `data.values` | `data["values"]` |
| 存在チェック不足 | `rows[0]` | `rows[0] if rows else ""` |
| 型指定漏れ | `value_type: （なし）` | `value_type: array[object]` |
| エラーハンドリング不足 | `{{ data }}` | `{{ data|default([]) }}` |

#### 3. デバッグのヒント

Googleシートからのデータ取得でエラーが発生した場合：

1. まずanswerノードで生データを確認
```yaml
type: answer
answer: "データ確認: {{#batch_get_node.json#}}"
```

2. 構造を理解してからtemplate-transformで処理
3. エラーメッセージに「builtin_function_or_method」が含まれる場合は、ほぼ確実にドット記法の問題
```

## 5. template-transform専用ベストプラクティスの追加

### 改善案
「03_変数とデータ管理.md」に以下のセクションを追加：

```markdown
## template-transformノードのベストプラクティス

### 1. 安全なデータアクセスパターン

```jinja2
{# 推奨：段階的な存在チェック #}
{% if data %}
  {% if data[0] %}
    {% if data[0]["key"] %}
      {{ data[0]["key"] }}
    {% else %}
      デフォルト値
    {% endif %}
  {% endif %}
{% endif %}

{# より簡潔な方法 #}
{{ (data[0]["key"] if data and data[0] else "デフォルト値") }}

{# defaultフィルタの活用 #}
{{ data[0]["key"]|default("デフォルト値") if data and data[0] else "デフォルト値" }}
```

### 2. 配列処理のパターン

```jinja2
{# 空配列の安全な処理 #}
{% set items = data|default([]) %}
{% for item in items %}
  処理
{% endfor %}

{# 条件付き配列生成 #}
{% set filtered_items = [] %}
{% for item in items %}
  {% if item.status == "active" %}
    {% set _ = filtered_items.append(item) %}
  {% endif %}
{% endfor %}
```

### 3. JSON出力のパターン

```jinja2
{# 辞書の作成と出力 #}
{% set result = {
  "total": items|length,
  "items": items,
  "timestamp": "2025-07-03"
} %}
{{ result|tojson }}

{# 配列の作成と出力 #}
{% set result_array = [] %}
{% for item in items %}
  {% set _ = result_array.append({
    "id": loop.index,
    "value": item
  }) %}
{% endfor %}
{{ result_array|tojson }}
```

### 4. エラーを防ぐチェックリスト

- [ ] すべてのフィルターがスペースなしで記述されている
- [ ] 配列アクセス前に存在チェックまたはdefaultフィルタ
- [ ] {{#変数#}}記法を使用していない
- [ ] ブラケット記法でのアクセス
- [ ] value_typeが適切に指定されている
```

## 6. 自動チェックツールの提案

### 改善案
YAMLファイルの自動検証スクリプトの作成を提案。以下の内容を「validate_dify_enhanced.py」として作成：

```python
import yaml
import re
import sys

def check_template_syntax(template_content):
    """template-transformノードの構文チェック"""
    errors = []
    
    # スペースありフィルタのチェック
    if re.search(r'{{\s*\w+\s*\|\s+\w+', template_content):
        errors.append("フィルターの前後にスペースがあります")
    
    # {{#変数#}}記法のチェック
    if re.search(r'{{#.*?#}}', template_content):
        errors.append("template内で{{#変数#}}記法が使用されています")
    
    # ドット記法のチェック（.valuesなど）
    if re.search(r'\w+\.values', template_content):
        errors.append("'.values'のようなドット記法が使用されています。ブラケット記法を使用してください")
    
    return errors

def check_google_sheets_patterns(content):
    """Google Sheets関連のパターンチェック"""
    errors = []
    
    # 誤ったデータアクセスパターン
    if 'output.data' in content or 'sheet_data[0].values' in content:
        errors.append("Google Sheets APIの戻り値構造が誤っています")
    
    return errors

def validate_dify_yaml(file_path):
    """DifyのYAMLファイルを検証"""
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
        data = yaml.safe_load(content)
    
    all_errors = []
    
    # template-transformノードのチェック
    if 'graph' in data and 'nodes' in data['graph']:
        for node in data['graph']['nodes']:
            if node.get('data', {}).get('type') == 'template-transform':
                template = node['data'].get('template', '')
                errors = check_template_syntax(template)
                if errors:
                    all_errors.extend([f"Node {node.get('id')}: {e}" for e in errors])
                
                # value_typeチェック
                variables = node['data'].get('variables', [])
                for var in variables:
                    if 'value_type' not in var:
                        all_errors.append(f"Node {node.get('id')}: 変数 {var.get('variable')} にvalue_typeが指定されていません")
    
    # Google Sheets関連のチェック
    gs_errors = check_google_sheets_patterns(content)
    all_errors.extend(gs_errors)
    
    return all_errors

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("使用方法: python validate_dify_enhanced.py <yaml_file>")
        sys.exit(1)
    
    errors = validate_dify_yaml(sys.argv[1])
    if errors:
        print("エラーが見つかりました:")
        for error in errors:
            print(f"  - {error}")
        sys.exit(1)
    else:
        print("検証成功: エラーは見つかりませんでした")
```

## まとめ

これらの改善を実施することで：

1. **コードチェック.mdの充実**により、開発者が見落としがちなポイントを網羅的にチェック可能
2. **エラー事例集**により、実際のエラーに遭遇した際の素早い解決が可能
3. **Google Sheets専用ガイドの強化**により、最も頻出するエラーパターンを予防
4. **template-transformベストプラクティス**により、安全で堅牢なコード作成が可能
5. **自動チェックツール**により、人的ミスを機械的に検出可能

これらの改善により、エラー発生率を大幅に低減し、開発効率を向上させることができます。