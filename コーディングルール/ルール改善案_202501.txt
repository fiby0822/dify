【Difyコーディングルール改善案】
作成日：2025年1月13日

■分析結果の概要
インポート成功したが動作エラーとなったケース1〜3、および成功事例の分析から、主要な問題は以下の通り：
1. テンプレート変数参照形式の誤り（最重要）
2. インポート成功してもクラッシュする問題
3. コーディングルール内の記述の不整合

■改善が必要な項目

【1】変数参照形式の統一と修正（最優先）

◆問題点
- 全体コーディングルール（1306行目）で`{{#sys.query#}}`形式を推奨
- 品質チェックリスト（87行目）で`{{#variable | json#}}`形式を記載
- 実際にはこの形式がjinja2.exceptions.TemplateSyntaxErrorの原因

◆改善案
1. 全体コーディングルール（1302-1325行目）の修正
   旧：
   ```
   1. ユーザー入力の参照
      - プロンプト内: {{#sys.query#}}
   2. 他ノードの出力参照
      - プロンプト内: {{#node_id.variable_name#}}
   ```
   
   新：
   ```
   1. ユーザー入力の参照
      - テンプレート内: {{sys.query}}
      - プロンプト内: {{#sys.query#}}（LLMノードのみ）
   2. 他ノードの出力参照
      - テンプレート内: {{node_id.variable_name}}
      - プロンプト内: {{#node_id.variable_name#}}（LLMノードのみ）
   ```

2. 品質チェックリスト（87行目）の修正
   旧：`{{#variable | json#}}`形式を使用
   新：`{{variable | tojson}}`形式を使用（template-transformノード）

3. 変数参照形式の使い分けルールを明確化
   - template-transformノード：`{{変数名}}`形式（#記号なし）
   - LLMノードのプロンプト：`{{#変数名#}}`形式（#記号あり）
   - tool_parametersのvalue：`{{#変数名#}}`形式（#記号あり）

【2】インポート成功_クラッシュ問題の対応

◆問題の分析
営業データ分析ツール_5623.ymlは以下の理由でクラッシュ：
1. sys.queryの参照方法が不適切（182行目）
2. 日付フィルター処理のエラー（296行目）

◆改善案
1. 全体コーディングルールに「template-transformでのsys.query参照」セクションを追加
   ```yaml
   # template-transformでのsys.query参照
   variables:
     - value_selector:
       - sys
       - query
       variable: query_input
       value_type: string
   template: "ユーザー入力：{{query_input}}"
   ```

2. 日付処理のベストプラクティスを追加
   - Jinja2の`now`フィルターは使用不可
   - 静的な日付を使用するか、codeノードで動的処理

【3】コンポーネント別ルールの補強

◆template-transformノードのルール追加
1. 変数参照は必ず`{{変数名}}`形式（#記号なし）
2. フィルター使用時：`{{変数名 | フィルター名}}`
3. よく使うフィルター：
   - tojson（jsonではない）
   - trim
   - default("デフォルト値")
4. 禁止事項：
   - `{{#変数名#}}`形式の使用
   - 存在しないフィルターの使用（json → tojson）

【4】エラー防止のためのチェック項目追加

◆品質チェックリストへの追加項目
- [ ] template-transformノードで`{{#変数名#}}`形式を使用していない
- [ ] template-transformノードで`| json`ではなく`| tojson`を使用
- [ ] LLMノードのプロンプトで`{{#変数名#}}`形式を正しく使用
- [ ] tool_parametersで変数参照する場合は`{{#変数名#}}`形式

◆クラッシュ事項チェックリストへの追加項目
- [ ] template-transformノードの変数参照に#記号が含まれていない
- [ ] 日付処理で`now`フィルターを使用していない
- [ ] 各ノードタイプに応じた正しい変数参照形式を使用

【5】サンプルコードの更新

正常動作する検証YML_5931.ymlを参考に、各ノードタイプの正しい実装例を追加：

◆template-transformノードの正しい例
```yaml
- data:
    template: |
      [
        {
          "range": "OUTPUT!A1:B1",
          "values": [["text", {{ arg1 | trim | tojson }} ]]
        }
      ]
    variables:
      - value_selector:
        - sys
        - query
        value_type: string
        variable: arg1
```

◆LLMノードでの変数参照例
```yaml
prompt_template:
  - role: user
    text: "ユーザー入力：{{#sys.query#}}"
```

【6】開発プロセスの改善

1. YML作成時の事前チェックリスト作成
   - ノードタイプ別の変数参照形式確認
   - 使用するフィルターの正当性確認
   
2. エラー発生時の対処フロー文書化
   - jinja2エラーの場合：変数参照形式を確認
   - Variable not foundエラー：変数名とセレクターを確認

【7】ドキュメントの優先度整理

1. 最優先修正項目
   - 全体コーディングルールの変数参照セクション
   - 品質チェックリストのtemplate-transform項目
   
2. 追加が必要な項目
   - ノードタイプ別変数参照ガイド
   - よくあるエラーと対処法

これらの改善により、動作エラーの大幅な削減が期待できます。
特に変数参照形式の統一は、全ての動作エラーケースで共通した問題であり、最優先で対応すべき項目です。