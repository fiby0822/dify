【Difyコーディングルール改善案】

作成日: 2025年1月3日
作成者: AI開発支援システム

■分析結果の概要
今回の動作チェックで報告された問題（ナレッジ未選択、IF_ELSEのELSE未接続）について、実際のYMLファイルを確認したところ、YMLファイル上では正しく設定されていることが判明しました。これは、Difyプラットフォーム側の問題、またはルールの不明確さに起因する可能性があります。

■改善提案

【1. 全体コーディングルール（全体コーディングルール.md）への追加提案】

### 1.1 知識検索（knowledge-retrieval）ノードの詳細仕様（新規追加）

#### dataset_ids設定の必須確認項目
- dataset_idsは必ず配列形式で記述（単一でも配列必須）
- 暗号化されたIDの形式を正確にコピー（1文字でも違うと動作しない）
- **重要**: Difyプラットフォーム側で事前にナレッジベースが作成されていることを確認
- サンプルID使用時の警告を明記

```yaml
# ✅ 正しい例
dataset_ids:
  - "7ccfkMYSp7EbvPLfz84xM+MGWesznlJf6laOpWdSR4vOjJa6XZ3W7JdALMg/4IRY"

# ❌ 間違い
dataset_ids: "7ccfkMYSp7EbvPLfz84xM+MGWesznlJf6laOpWdSR4vOjJa6XZ3W7JdALMg/4IRY"  # 配列形式でない
```

### 1.2 IF_ELSEノードのELSEケース接続の明確化

#### ELSEケース（デフォルトケース）の必須設定
- すべてのIF_ELSEノードは必ずELSEケースの処理を含める
- ELSEケースのsourceHandleは必ず"false"（文字列）を使用
- ELSEケースが接続されていることを視覚的に確認

```yaml
# ELSEケースのエッジ設定例
- data:
    isInLoop: false
    sourceType: if-else
    targetType: answer  # 実際の接続先タイプ
  source: condition_node
  sourceHandle: "false"  # ELSEケースは必ず"false"
  target: default_answer_node
```

### 1.3 実行時検証エラーへの対応（新規セクション）

#### Difyプラットフォーム側のエラーパターン
1. **ナレッジ未選択エラー**
   - YMLでdataset_idsが設定されていても発生する場合がある
   - 対処法：
     - Difyプラットフォーム上でナレッジベースの存在を確認
     - IDの有効性を再確認
     - インポート後、UI上でナレッジを手動選択

2. **ELSE未接続エラー**
   - YMLで正しく接続されていても表示上の問題で発生する場合がある
   - 対処法：
     - インポート後、フロー図でELSEケースの接続を視覚的に確認
     - 必要に応じてUI上で再接続

【2. コンポーネント記述ルール_IF_ELSE.txtへの改善提案】

### 2.1 エッジ接続の検証手順（新規追加）

#### インポート後の必須確認項目
1. **視覚的確認**
   - すべてのケースから矢印が出ていることを確認
   - ELSEケース（デフォルト）の矢印が存在することを確認
   - 接続先ノードが正しいことを確認

2. **sourceHandle名の完全一致チェックリスト**
   ```
   ☐ case_idの値をコピー
   ☐ エッジのsourceHandleにペースト
   ☐ 大文字小文字、アンダースコア、ハイフンが完全一致
   ☐ ELSEケースは"false"（引用符含む）
   ```

### 2.2 数値比較の代替パターン（強化）

既存の「数値の直接比較は避ける」という推奨に加えて：

#### 推奨パターン
1. **文字列変換パターン**
   - 数値を文字列として出力するようLLMに指示
   - IF_ELSEで文字列比較を使用

2. **カテゴリ化パターン**
   - 数値範囲を「高」「中」「低」などのカテゴリに変換
   - カテゴリ名で分岐

【3. コンポーネント記述ルール_知識検索.txtへの改善提案】

### 3.1 トラブルシューティングセクション（新規追加）

#### よくある問題と対処法
1. **「ナレッジが選択されていない」エラー**
   - 原因1：dataset_idsの形式エラー
     - 対処：配列形式を確認
   - 原因2：無効なdataset_id
     - 対処：Difyプラットフォームで有効なIDを再取得
   - 原因3：プラットフォーム側の同期問題
     - 対処：インポート後、UI上で手動選択

2. **検索結果が返らない**
   - retrieval_modeの設定を確認
   - query_variable_selectorの参照が正しいか確認

【4. 品質チェックリスト.mdへの改善提案】

### 4.1 インポート後の動作確認セクション（新規追加）

#### 12.5 インポート成功後の追加確認項目
- [ ] フロー図でIF_ELSEのすべての分岐が視覚的に接続されている
- [ ] 知識検索ノードでナレッジベースが選択されている（UI上で確認）
- [ ] テスト実行で「Variable not found」エラーが発生しない
- [ ] 数値比較を使用している場合、文字列変換が適切に行われている

### 4.2 プラットフォーム互換性チェック（新規）

#### 12.6 Difyバージョン別の注意事項
- [ ] 使用するDifyのバージョンを確認
- [ ] バージョン固有の制限事項を理解
- [ ] 必要に応じてワークアラウンドを実装

【5. クラッシュ事項チェックリスト.mdへの改善提案】

### 5.1 実行時エラーセクション（強化）

#### 12. 実行時エラー（インポート成功but実行エラー）
- [ ] IF_ELSEのELSEケースが実行時に到達可能か確認
- [ ] 知識検索ノードのdataset_idsが実際に存在するか確認
- [ ] 条件分岐で未実行パスの変数を参照していないか再確認
- [ ] **数値比較でUnicode文字を使用していないか最終確認**

【6. 新規ドキュメントの提案】

### 「Dify_YML実行時トラブルシューティングガイド.md」の作成

#### 内容案
1. インポート成功but実行エラーのパターン集
2. プラットフォーム側の既知の問題と回避策
3. デバッグ手順のフローチャート
4. よくある質問（FAQ）

■総括

今回の調査により、YMLファイルの記述は正しくても、Difyプラットフォーム側の動作や表示上の問題により、エラーとして報告される場合があることが判明しました。

これを踏まえ、以下の3つの観点でルールを改善することを提案します：

1. **予防的対策**: より厳密な記述ルールとチェック項目の追加
2. **診断的対策**: 問題発生時の原因特定手順の明確化
3. **回避的対策**: 既知の問題に対するワークアラウンドの文書化

これらの改善により、開発効率の向上とエラー発生率の低減が期待できます。

#4