# パラメータ抽出コンポーネントに関するルール改善案

## 1. 現状の問題点
- コンポーネント記述ルールでは「使用禁止」と記載
- 品質チェックリストでは「使用は要検討」と記載
- 実際の動作確認済みサンプルでは使用されている
- 全体コーディングルールに詳細記載がない
- ルール間で一貫性がない

## 2. 改善提案

### 2.1 コンポーネント記述ルール_パラメータ抽出.txt の修正

【修正前】
```
**重要**: 既存のコーディングルールでは使用禁止とされていますが、動作確認済みサンプルでは使用されています。代替手段としてLLMノードまたはcodeノードの使用も検討してください。
```

【修正後】
```
**重要**: パラメータ抽出コンポーネントは以下の条件を満たす場合にのみ使用を推奨します：

■使用推奨条件
1. LLMからの出力から明確な目的を持って変数を抽出する場合
2. LLMの出力のゆらぎを吸収し、後続処理に明確な形式で値を渡す必要がある場合

■使用非推奨ケース
- 単純な文字列処理で対応可能な場合 → codeノードを使用
- 固定フォーマットのJSON出力が可能な場合 → LLMノードでJSON出力を指定
- 複雑な条件分岐を含む抽出の場合 → codeノードで実装

■選定基準
1. 抽出対象が非構造化テキストである
2. 抽出ルールが自然言語で記述可能である
3. LLMの理解力を活用する必要がある
```

### 2.2 品質チェックリスト.md の修正

【修正前】
```
- [ ] parameter-extractorの抽出項目が明確に定義されている（注：使用は要検討）
```

【修正後】
```
#### 4.5.1 parameter-extractor（パラメータ抽出）
- [ ] 使用推奨条件（LLM出力からの抽出、ゆらぎ吸収）を満たしている
- [ ] 抽出パラメータの名前がsnake_caseで統一されている
- [ ] 各パラメータにdescriptionが明確に記載されている
- [ ] 必須項目（required: true）は最小限に抑えられている
- [ ] 抽出結果の検証が後続ノードで実施されている
- [ ] instructionフィールドで抽出の具体的な指示が記載されている（推奨）
```

### 2.3 全体コーディングルール/08_詳細リファレンス.md への追加

【追加内容】
```markdown
### 8.3.7 parameter-extractor（パラメータ抽出）

LLMを使用して非構造化テキストから構造化データを抽出するノード。

#### 使用ガイドライン
- **推奨**: LLM出力から特定の情報を抽出し、後続処理で使用する場合
- **非推奨**: 単純な文字列処理やパターンマッチングで対応可能な場合

#### 必須フィールド
| フィールド | 説明 | 例 |
|---------|------|-----|
| type | ノードタイプ（固定値） | "parameter-extractor" |
| model | 使用するLLMモデル | provider, name, mode |
| parameters | 抽出するパラメータ定義 | name, type, description, required |
| query | 抽出対象のテキスト | 変数参照形式 |

#### オプションフィールド
| フィールド | 説明 | デフォルト |
|---------|------|----------|
| instruction | 抽出時の追加指示 | なし |
| reasoning_mode | 推論モード | "prompt" |
```

### 2.4 コードチェック.md への追加

【追加内容】
```markdown
## 7. パラメータ抽出ノード

### 7.1 使用条件の確認
- [ ] LLM出力からの抽出である
- [ ] 出力のゆらぎ吸収が必要である
- [ ] 代替手段（codeノード、LLMのJSON出力）では対応困難である

### 7.2 実装の確認
- [ ] パラメータ名はsnake_case
- [ ] descriptionは日本語で明確に記載
- [ ] typeは適切に選択（string/number/boolean/array[string]）
- [ ] requiredは必要最小限
- [ ] queryは正しい変数参照形式
```

## 3. 実装優先順位

1. **最優先**: コンポーネント記述ルール_パラメータ抽出.txt の修正
   - 使用禁止から条件付き推奨への変更
   
2. **高優先**: 品質チェックリスト.md の更新
   - 具体的なチェック項目の追加
   
3. **中優先**: 全体コーディングルール/08_詳細リファレンス.md への追加
   - 詳細仕様の明文化
   
4. **低優先**: コードチェック.md への追加
   - 実装時のチェックポイント追加

## 4. 移行期間の対応

既存のワークフローへの影響を最小限にするため：
1. 既存の動作確認済みワークフローは引き続き有効とする
2. 新規開発時は改訂後のルールに従う
3. 既存ワークフローの修正時は段階的に新ルールに移行

## 5. 補足事項

### なぜこの改善が必要か
1. **実態との乖離解消**: 実際に使用されているのに「使用禁止」は矛盾
2. **明確な判断基準**: いつ使うべきか、いつ避けるべきかが不明確
3. **LLMの特性活用**: LLMの自然言語理解力を活用すべき場面がある
4. **開発効率向上**: 適切な場面での使用により開発効率が向上

### 期待される効果
1. ルールの一貫性向上
2. 開発者の判断迷いの解消
3. 適材適所でのコンポーネント活用
4. ワークフローの品質向上