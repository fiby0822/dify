/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール_リファクタリング案.txt に基づいて、全体コーディングルールのファイル分割を実行して下さい。

作業手順

■バックアップの作成
・既存の「全体コーディングルール」ディレクトリ全体をバックアップ
・/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/old/yyyymmdd_連番　既にあるフォルダではなく連番末尾+1のフォルダを新規作成すること
・作成したフォルダに「全体コーディングルール」ディレクトリの内容を複製

■ファイル分割の実行
・/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール_リファクタリング案.txt を読み込み、提案されたファイル構成に従って分割を実行
・元の全体コーディングルール.md の内容を一切削減せず、提案された8つのファイルに分割

■作成するファイル（すべて /Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/ 配下に作成）

1. 00_index.md
   - 全体構成の説明
   - 各ファイルへのリンク
   - クイックスタートガイド
   - よく使う項目への索引

2. 01_基本構造とエラー防止.md
   - セクション0: よくある失敗パターン（必読）
   - セクション2: YAMLファイル基本構造
   - セクション3: 命名規則
   - セクション13: 型定義リファレンス（基本部分）
   - セクション14: 最小構成テンプレート

3. 02_ワークフロー設計.md
   - セクション4: ワークフロー設計原則
   - セクション5: ナレッジベース管理
   - セクション16: システム変数リファレンス
   - セクション17: モード別ベストプラクティス
   - セクション18: コード実行ノードの注意事項

4. 03_変数とデータ管理.md
   - セクション6: 変数管理
   - 変数参照形式の詳細
   - 変数スコープの説明
   - データ型と変換規則

5. 04_品質とセキュリティ.md
   - セクション7: 品質管理
   - セクション8: セキュリティ考慮事項
   - セクション9: パフォーマンス最適化
   - セクション11: 互換性とアップデート

6. 05_トラブルシューティング.md
   - セクション12: トラブルシューティング指針（全体）
   - セクション20: 最終チェックリスト
   - セクション21: よくある質問（FAQ）
   - エラー別対処法の詳細

7. 06_外部連携とツール.md
   - セクション24: マーケットプレイス依存関係管理
   - セクション25: トークン数管理とモデル選択
   - セクション26: 外部ツール（Tool）ノードの使用

8. 07_ドキュメントと設定.md
   - セクション10: ドキュメント化
   - セクション15: 開発時の推奨フロー
   - セクション19: パフォーマンスと拡張性
   - セクション22: デバッグ設定管理
   - セクション23: hashフィールドの取り扱い

9. 08_詳細リファレンス.md
   - セクション13: 型定義リファレンス（詳細版）
   - 全フィールドの完全な仕様
   - 属性値の有効範囲
   - バージョン別の差異

■実装上の注意事項

1. 相互参照の実装
   - 各ファイルの冒頭に関連ファイルへのリンクを配置
   - 関連する内容がある場合は適切にリンクを設定

2. 重複の削減
   - 同じ内容が複数箇所にある場合、主となる場所に記載し、他は参照リンクを設定
   - 例: エラー対処法は05_トラブルシューティング.mdに集約し、他ファイルからは参照

3. 検索性の向上
   - 各ファイルに検索用キーワードリストを追加
   - インデックスファイルに全体検索ガイドを記載

4. ファイルサイズの確認
   - 各ファイルが25,000トークン以下であることを確認
   - 超過する場合は更に分割を検討

■最終確認
・すべてのセクションが適切なファイルに配置されているか確認
・元の内容が一切削減されていないか確認
・相互参照リンクが正しく設定されているか確認
・00_index.md から全ファイルへアクセス可能か確認

更新後、ローカルのgitをコミットし、リモートにpushすること

ultrathink