Difyコーディングルール改善案

■改善案作成日: 2025-07-02
■対象: WEB検索（Tavily Search）ツールの導入に伴うルール見直し

=====================================
1. 全体コーディングルール（/コーディングルール/全体コーディングルール/全体コーディングルール.md）の改善案
=====================================

【問題点】
- セクション4.0.2「絶対に使用禁止のノードタイプ」でtoolノードを使用禁止としているが、WEB検索にはtoolノードが必須
- セクション11.1「使用禁止ノードタイプ」でもtoolノードを使用禁止としている
- 外部ツール（WEB検索）と内部機能（知識検索）の区別が不明確

【改善案】
1. セクション4.0.1「許可されているノードタイプ」に追加：
   - ツール | tool | 外部ツール実行 | マーケットプレイスツール使用時のみ許可

2. セクション4.0.2「絶対に使用禁止のノードタイプ」から削除：
   - toolノードの記載を削除

3. 新規セクション4.0.3「toolノードの使用ガイドライン」を追加：
   ```
   ### 4.0.3 toolノードの使用ガイドライン
   
   toolノードは以下の条件を満たす場合のみ使用可能：
   1. マーケットプレイスの認証済みツールを使用する場合
   2. dependenciesセクションに適切な定義がある場合
   3. 外部API連携が必要不可欠な場合
   
   推奨されるtoolノードの用途：
   - WEB検索（Tavily Search）
   - 外部API連携
   - マーケットプレイスの公式ツール
   
   禁止される使用方法：
   - カスタムツールの作成
   - 未認証のツール使用
   - 内部処理で代替可能な場合
   ```

4. セクション5「ナレッジベース管理」の後に新規セクション追加：
   ```
   ## 5.5 検索機能の使い分け
   
   ### 知識検索（knowledge-retrieval）
   - 用途：事前登録されたナレッジベースからの検索
   - ノードタイプ：knowledge-retrieval
   - 特徴：高速、信頼性高、オフライン動作可能
   - 使用場面：FAQ、マニュアル、社内文書の検索
   
   ### WEB検索（Tavily Search）
   - 用途：インターネット上の最新情報の検索
   - ノードタイプ：tool
   - 特徴：リアルタイム、広範囲、外部依存
   - 使用場面：最新ニュース、一般情報、トレンド調査
   ```

=====================================
2. 品質チェックリスト（/コーディングルール/品質チェック/品質チェックリスト.md）の改善案
=====================================

【問題点】
- セクション0.8「ノードタイプチェック」でtoolノードを使用していないか確認している
- セクション4.5「その他のノード」でtoolノードの詳細な確認項目がない

【改善案】
1. セクション0.8を修正：
   ```
   ### 0.8 ノードタイプチェック
   
   使用するノードタイプの制限確認：
   
   - [ ] 使用しているノードタイプは基本4種類（start、llm、if-else、answer）のみか
   - [ ] templateノードを使用していないか
   - [ ] toolノードを使用する場合、マーケットプレイスの認証済みツールか
   - [ ] toolノードを使用する場合、dependenciesが適切に設定されているか
   - [ ] 高度なノードタイプを使用する場合、代替案を検討したか
   ```

2. セクション4.5の後に新規セクション追加：
   ```
   ### 4.8 toolノード（外部ツール）
   - [ ] provider_id、provider_name、provider_typeが正確に設定されている
   - [ ] tool_nameが正しく設定されている
   - [ ] tool_parametersの必須項目がすべて設定されている
   - [ ] dependenciesセクションに対応するプラグイン定義がある
   - [ ] is_team_authorizationが適切に設定されている
   - [ ] エラーハンドリングが実装されている
   - [ ] 外部API制限（レート制限等）を考慮している
   ```

=====================================
3. クラッシュ事項チェックリスト（/コーディングルール/品質チェック/クラッシュ事項チェックリスト.md）の改善案
=====================================

【問題点】
- セクション11.1でtoolノードを使用禁止としている
- WEB検索特有のクラッシュ要因が記載されていない

【改善案】
1. セクション11.1を修正：
   ```
   ### 11.1 使用禁止ノードタイプ
   - [ ] **templateノードを使用していない（使用禁止）**
   - [ ] **template-transformノードを使用していない（使用禁止）**
   - [ ] **認証されていないtoolノードを使用していない**
   - [ ] **使用可能なノードタイプのみを使用している**
   ```

2. 新規セクション13「toolノード関連のクラッシュ防止」を追加：
   ```
   ## 13. toolノード関連のクラッシュ防止
   
   ### 13.1 dependencies関連
   - [ ] **toolノード使用時はdependenciesセクションが必須**
   - [ ] **marketplace_plugin_unique_identifierが正確**
   - [ ] **バージョン情報が最新または互換性がある**
   
   ### 13.2 provider設定
   - [ ] **provider_idの形式が正確（例：langgenius/tavily/tavily）**
   - [ ] **provider_typeが"builtin"（組み込みツールの場合）**
   - [ ] **tool_nameがプロバイダーに対応している**
   
   ### 13.3 パラメータ設定
   - [ ] **tool_parametersとtool_configurationsの型が一致**
   - [ ] **boolean値の0/1変換が必要な場合の対応**
   - [ ] **必須パラメータ（query等）が設定されている**
   ```

=====================================
4. 比較演算子に関する統一ルールの強化
=====================================

【問題点】
- 全体コーディングルールのセクション12.7で比較演算子のガイドラインが記載されているが、実際のYMLファイル（検索テスト.yml）ではUnicode文字が使用されている

【改善案】
全体コーディングルールのセクション12.7に以下を追加：
```
#### 12.7.1 比較演算子の自動変換ルール
YMLファイル作成時は必ず以下の変換を実施：
- ≥ → >= （必須変換）
- ≤ → <= （必須変換）
- ≠ → != （必須変換）

変換確認コマンド：
```bash
# Unicode文字を検出
grep -E "[≥≤≠]" yourfile.yml
# 自動変換
sed -i 's/≥/>=/g; s/≤/<=/g; s/≠/!=/g' yourfile.yml
```
```

=====================================
5. YAMLコメントに関するルールの更なる強化
=====================================

【改善案】
全体コーディングルールのセクション2.1.6に以下を追加：
```
#### 2.1.6.1 プロンプト内での#記号の取り扱い
- プロンプト内でも#記号の使用を最小限に
- 番号付けには「1.」「2.」形式を使用
- 変数参照の{{#variable#}}は例外として許可
- マークダウンの見出し（#、##）も避ける

例：
```yaml
# ❌ 間違い
prompt_template: |
  # 以下の項目を確認してください
  項目#1: 内容
  
# ✅ 正解
prompt_template: |
  以下の項目を確認してください
  項目1: 内容
```
```

=====================================
6. 新規コンポーネント別ルールファイルの追加
=====================================

【追加ファイル】
/コーディングルール/コンポーネント別コーディングルール/コンポーネント記述ルール_検索.txt
（既に作成済み）

=====================================
7. 推奨される実装順序
=====================================

1. 【最優先】全体コーディングルールのtoolノード禁止ルールを修正
2. 【優先】品質チェックリストとクラッシュ事項チェックリストのtoolノード関連項目を修正
3. 【重要】比較演算子の自動変換ルールを追加
4. 【推奨】YAMLコメントルールの強化
5. 【推奨】検索機能の使い分けガイドラインを追加

=====================================
8. 影響範囲と注意事項
=====================================

- 既存のYMLファイルでtoolノードを使用している場合は、マーケットプレイスツールかどうかを確認
- 比較演算子のUnicode文字は全て ASCII文字に置換が必要
- WEB検索を使用する際は、必ずdependenciesセクションの設定を確認
- 知識検索とWEB検索の使い分けを明確にし、適切なノードタイプを選択

以上の改善により、WEB検索機能を安全に使用できるようになり、クラッシュリスクを低減できます。