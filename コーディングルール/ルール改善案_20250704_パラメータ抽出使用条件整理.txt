Difyコーディングルール改善案：パラメータ抽出コンポーネントの使用条件整理

作成日：2025年7月4日
作成者：Claude（ultrathink版）

■ 現状の問題点
1. 全体コーディングルールでは、parameter-extractorは使用可能なノードタイプに含まれている
2. コンポーネント別コーディングルールでは、使用禁止とされている
3. 実際の動作確認済みサンプルでは使用されている
4. この矛盾により、開発者が混乱する可能性がある

■ 改善案の概要
パラメータ抽出コンポーネントの使用を特定の条件下で許可し、その使用方法と制限を明確に定義する。

================================================================================
【改善対象ファイル①】
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/コンポーネント別コーディングルール/コンポーネント記述ルール_パラメータ抽出.txt

【改善内容】
6行目の「**重要**: 既存のコーディングルールでは使用禁止とされていますが」の記述を以下に変更：

変更前：
**重要**: 既存のコーディングルールでは使用禁止とされていますが、動作確認済みサンプルでは使用されています。代替手段としてLLMノードまたはcodeノードの使用も検討してください。

変更後：
**重要**: パラメータ抽出コンポーネントの使用は以下の条件を満たす場合に限り許可されます：

■ 使用許可条件
1. **LLMからの出力を構造化する場合**
   - LLMの自由記述出力から特定の値を抽出
   - 後続処理のために明確な形式でデータを渡す必要がある
   - 出力のゆらぎを吸収する必要がある

2. **以下のすべての条件を満たす場合**
   - 抽出する項目が明確に定義できる
   - 抽出精度が業務要件を満たす
   - 代替手段（LLMノードでのJSON出力指定）では不十分な場合

■ 使用禁止ケース
- 単純な文字列処理で実現可能な場合
- 正規表現で対応可能な場合
- codeノードでの処理が適切な場合
- 複雑な変換ロジックが必要な場合

■ 推奨される使用パターン
1. **フォーム入力の解析**
   - 自然言語で記述された注文内容から構造化データを抽出
   - 顧客問い合わせから必要情報を抽出

2. **データ分類・タグ付け**
   - テキストから商品カテゴリを抽出
   - 感情分析結果を構造化

3. **数値・日付の抽出**
   - 文章中の金額、数量、日付を構造化
   - 複数の形式に対応した抽出

================================================================================
【改善対象ファイル②】
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/全体コーディングルール/02_ワークフロー設計.md

【改善内容】
32行目のパラメータ抽出の説明を以下に変更：

変更前：
| パラメータ抽出 | parameter-extractor | パラメータ抽出 | |

変更後：
| パラメータ抽出 | parameter-extractor | パラメータ抽出 | 条件付き使用可 |

さらに、4.0.2の後に以下のセクションを追加：

### 4.0.2.1 条件付き使用可能なノードタイプ

以下のノードタイプは、特定の条件を満たす場合のみ使用を許可します：

#### parameter-extractor（パラメータ抽出）
**使用許可条件：**
- LLMの出力から構造化データを抽出する必要がある場合
- 出力のゆらぎを吸収する必要がある場合
- 後続処理で明確な形式のデータが必要な場合

**使用前の確認事項：**
1. LLMノードでのJSON出力指定で対応できないか検討
2. codeノードでの処理で対応できないか検討
3. 抽出精度が業務要件を満たすか確認

詳細は「コンポーネント記述ルール_パラメータ抽出.txt」を参照してください。

================================================================================
【改善対象ファイル③】
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/品質チェックリスト.md

【改善内容】
364行目の記述を以下に変更：

変更前：
- [ ] parameter-extractorの抽出項目が明確に定義されている（注：使用は要検討）

変更後：
- [ ] parameter-extractorを使用する場合、使用許可条件を満たしている
- [ ] parameter-extractorの抽出項目が明確に定義されている
- [ ] 抽出精度のテストを実施し、要件を満たすことを確認している
- [ ] 代替手段（LLMのJSON出力、codeノード）では不十分な理由が明確である

================================================================================
【改善対象ファイル④】
/Users/tatsuya/Documents/01_fiby/09_ゼット/コーディングルール/品質チェック/コードチェック.md

【改善内容】
「## 2. IF-ELSEノード固有チェック」の後に以下のセクションを追加：

## 2.5 parameter-extractorノード固有チェック

### 2.5.1 使用前確認
- [ ] **使用許可条件を満たしている**
- [ ] **LLMノードでのJSON出力では不十分な理由が明確**
- [ ] **codeノードでの処理では不十分な理由が明確**

### 2.5.2 実装チェック
- [ ] **instruction（指示）が明確で具体的**
- [ ] **parametersの定義が適切**
  - name: snake_case形式
  - type: 適切な型（string/number/boolean/array[string]）
  - description: 明確な説明
  - required: 必須フラグの適切な設定
- [ ] **query（入力）の参照が正しい**
- [ ] **reasoning_modeの設定が適切**

### 2.5.3 品質確認
- [ ] **抽出精度のテストを実施済み**
- [ ] **エラーケースの処理を検討済み**
- [ ] **後続ノードでのnull/undefined処理を実装済み**

================================================================================
【新規追加ファイル】
/Users/tatsuya/Documents/01_fiby/09_ゼット/開発依頼/パラメータ抽出使用ガイドライン.md

【内容】
# パラメータ抽出（parameter-extractor）使用ガイドライン

## 概要
パラメータ抽出コンポーネントは、非構造化テキストから構造化データを抽出する強力なツールですが、適切な使用条件を満たす場合のみ使用を許可します。

## 使用判断フローチャート
```
1. LLMの出力から特定の値を抽出したいか？
   └─ No → パラメータ抽出は不要
   └─ Yes → 2へ

2. LLMに直接JSON形式で出力させることは可能か？
   └─ Yes → LLMノードでJSON出力を指定（推奨）
   └─ No → 3へ

3. 正規表現やシンプルな文字列処理で抽出可能か？
   └─ Yes → codeノードを使用（推奨）
   └─ No → 4へ

4. 抽出する項目は明確に定義できるか？
   └─ No → パラメータ抽出は不適切
   └─ Yes → 5へ

5. 出力のゆらぎを吸収する必要があるか？
   └─ No → codeノードを検討
   └─ Yes → パラメータ抽出の使用を許可
```

## 適切な使用例

### 例1：注文内容の構造化
```yaml
# LLMの出力例：
# 「明日の午後3時に、マルゲリータピザ2枚とコーラ3本を配達してください。」

id: order_extraction
type: parameter-extractor
data:
  instruction: "注文内容から配達情報を抽出してください"
  parameters:
    - name: delivery_date
      type: string
      description: "配達日（YYYY-MM-DD形式）"
      required: true
    - name: delivery_time
      type: string
      description: "配達時間"
      required: true
    - name: items
      type: array[string]
      description: "注文商品リスト"
      required: true
    - name: quantities
      type: array[string]
      description: "各商品の数量"
      required: true
```

### 例2：小説の構造情報抽出（サンプルymlの例）
```yaml
# タイトル、章立て、章の数を個別に抽出
- タイトル抽出ノード
- 章のCSV出力ノード
- 章の個数カウントノード
```

## 不適切な使用例

### 例1：単純な数値抽出
```yaml
# NG：正規表現で簡単に抽出可能
# 「合計金額は1,234円です」→ 1234
# この場合はcodeノードを使用すべき
```

### 例2：固定フォーマットの解析
```yaml
# NG：フォーマットが決まっている場合
# 「2024-07-04 15:30:00 [INFO] ログメッセージ」
# この場合はcodeノードで文字列分割を使用すべき
```

## ベストプラクティス

1. **まずLLMでの直接出力を検討**
   - プロンプトで明確な出力形式を指定
   - JSON形式での出力を試みる

2. **代替手段の検討**
   - codeノードでの実装可能性を評価
   - 正規表現での対応を検討

3. **使用する場合の注意点**
   - instructionを明確に記述
   - パラメータの型と説明を詳細に定義
   - エラーハンドリングを実装
   - 抽出精度のテストを必ず実施

4. **後続処理の考慮**
   - null/undefinedの可能性を考慮
   - デフォルト値の設定
   - バリデーション処理の実装

================================================================================

■ 実装優先順位
1. 【高】コンポーネント記述ルール_パラメータ抽出.txtの更新
2. 【高】02_ワークフロー設計.mdへの条件付き使用の明記
3. 【中】品質チェックリスト.mdの更新
4. 【中】コードチェック.mdへのセクション追加
5. 【低】パラメータ抽出使用ガイドライン.mdの新規作成（開発者向け参考資料）

■ 期待される効果
1. 現在の矛盾が解消され、開発者の混乱を防げる
2. 適切な使用条件が明確になり、品質向上につながる
3. 代替手段の検討を促すことで、より保守性の高い実装を推進できる
4. 使用する場合のベストプラクティスが明確になる

■ 移行措置
- 既存のparameter-extractorを使用しているワークフローは、次回の更新時に使用条件を満たしているか確認する
- 条件を満たさない場合は、代替手段への移行を検討する