Dify YMLコーディングルール改善案
作成日: 2025年7月3日
ファイル番号: 9320

【概要】
エラー分析結果と成功例との比較から、以下のルール改善を提案します。

========================================
【1. システム予約変数エラー防止ルールの追加】
========================================

■全体コーディングルール.mdへの追加事項

### システム予約変数の取り扱い（最重要）
- **advanced-chatモードでは、startノードでシステム予約変数を定義しない**
- **sys.query、sys.files、sys.conversation_id、sys.user_idは予約済み**
- **これらの変数は自動的に利用可能であり、定義は不要**

#### 誤った例（インポート失敗の原因）
```yaml
# advanced-chatモード
- data:
    type: start
    variables:
      - variable: sys.query  # ❌ エラー発生
        type: text-input
        label: ユーザー入力
```

#### 正しい例
```yaml
# advanced-chatモード
- data:
    type: start
    variables: []  # ✅ 空配列必須
```

========================================
【2. IF_ELSEノードのlogical_operator必須性の明確化】
========================================

■コンポーネント記述ルール_IF_ELSE.txtへの修正

現在：
- logical_operator: 論理演算子（"and"または"or"）

修正案：
- logical_operator: 論理演算子（"and"または"or"）**【必須】条件が1つでも必要**

追加説明：
```yaml
# 条件が1つの場合でもlogical_operatorは必須
cases:
  - case_id: single_condition
    conditions:
      - variable_selector: [node, value]
        comparison_operator: ">"
        value: 10
    logical_operator: and  # ✅ 必須（条件が1つでも省略不可）
```

========================================
【3. LLMノードのmemory設定ガイドラインの明確化】
========================================

■全体コーディングルール.mdへの追加

### LLMノードのmemory設定
1. **推奨**: memoryフィールドを完全に省略
2. **使用する場合**: 以下の完全な構造が必須
```yaml
memory:
  enabled: false
  window:
    enabled: false
    size: 10
```

**注意**: 不完全なmemory設定はエラーの原因となります。

========================================
【4. toolノードのパラメータ形式の明確化】
========================================

■新規セクション追加：toolノードパラメータガイドライン

### tool_parametersの正しい形式（必須）
すべてのパラメータはtype/value形式で記述する必要があります。

#### 誤った例（エラー発生）
```yaml
tool_parameters:
  ranges: '["INPUT!A1:C10"]'  # ❌ 直接値設定
  spreadsheet_id: 1dd5IPZBYY...  # ❌ 直接値設定
```

#### 正しい例
```yaml
tool_parameters:
  ranges:
    type: mixed  # または constant
    value: '["INPUT!A1:C10"]'
  spreadsheet_id:
    type: mixed
    value: 1dd5IPZBYY...
```

========================================
【5. トークン数管理ガイドラインの追加】
========================================

■品質チェックリスト.mdへの追加

### 4.2.1 トークン数管理チェック（新規追加）
- [ ] **外部データ（検索結果、ファイル内容）を直接LLMに渡していない**
- [ ] **prompt_template + 想定される最大入力 + max_tokens < モデル上限**
- [ ] **検索結果を扱う場合、前処理ノードが存在する**
- [ ] **max_tokensが適切に設定されている（通常1000-2000）**
- [ ] **大量データ処理時の分割戦略が実装されている**

#### モデル別推奨設定
- gpt-4: 検索結果max_results ≤ 3、max_tokens ≤ 1500
- gpt-3.5-turbo/gpt-4o: 検索結果max_results ≤ 10、max_tokens ≤ 2000

========================================
【6. Google Sheets操作の具体例追加】
========================================

■新規ファイル作成：コンポーネント記述ルール_GoogleShpredSheet操作.txt

以下の内容で新規ファイルを作成することを推奨：
- 正しい依存関係の設定方法
- データ形式の具体例（配列の配列）
- template-transformを使用したデータ整形パターン
- エラーハンドリングの実装例

========================================
【7. クラッシュ事項チェックリストへの追加】
========================================

■以下の項目を最優先チェック項目として追加

### システム予約変数エラー（新規追加）
- [ ] **advanced-chatモードでstartノードのvariables配列が空[]である**
- [ ] **sys.queryを変数名として定義していない**
- [ ] **その他のシステム予約変数（sys.files等）を定義していない**

### toolノードパラメータ形式（新規追加）
- [ ] **全てのtool_parametersがtype/value形式である**
- [ ] **直接値設定を行っていない**

========================================
【8. 実装優先順位】
========================================

1. **最優先**: システム予約変数エラー防止ルール
   - インポート失敗の最大要因
   
2. **高優先度**: logical_operator必須性の明確化
   - 動作エラーの主要因
   
3. **中優先度**: memory設定、tool形式、トークン管理
   - 実行時エラーの防止

4. **推奨**: Google Sheets操作専用ルール
   - 利用頻度の高いツールの品質向上

========================================
【9. 検証YML_5931.ymlから学ぶベストプラクティス】
========================================

成功例から抽出した推奨パターン：

1. **独立実行パターン**
   - 各IF_ELSE分岐が独立して完結
   - 未実行ノードの参照エラーを回避

2. **明確な条件設計**
   - 各ケースの条件が排他的
   - デフォルトケース（false）の適切な処理

3. **適切なノード配置**
   - x座標: 50単位の整列
   - 左から右への論理的なフロー

========================================
【10. エラー防止のための開発フロー改善】
========================================

1. **開発前チェック**
   - モード選択（advanced-chat推奨）
   - 必要なツールの確認

2. **開発中チェック**
   - YAMLコメントの即時削除
   - 変数参照の妥当性確認

3. **開発後チェック**
   - 品質チェックリスト実施
   - クラッシュ事項チェックリスト実施
   - テストインポート実施

以上