# コーディングルール改善案
## 作成日: 2025年1月17日
## 作成理由: template-transformノードにおける変数参照エラーの多発に対応

---

## 1. 最重要改善項目：変数参照記法の明確化

### 現状の問題
- template-transformノードでの変数参照記法が曖昧
- 開発者が`{{#変数#}}`と`{{ 変数 }}`を混同して使用
- 実際のエラーケースで`{{#analysis_result | trim | tojson#}}`のような誤った記法が発生

### 改善案
**全体コーディングルール/03_変数とデータ管理.md** に以下を追加：

```markdown
### template-transformノード専用の変数参照ルール（最重要）

#### 基本ルール
1. **template内では絶対に`{{#変数#}}`記法を使用しない**
2. **標準的なJinja2記法`{{ 変数 }}`のみを使用**
3. **フィルターを使用する場合も`{{ 変数 | filter }}`形式**

#### 正しい例と間違い例
```yaml
# ❌ 絶対にやってはいけない例（エラーの原因）
template: |
  {{#analysis_result | trim | tojson#}}  # Syntax Error!
  {{#batch_get_node.json#}}              # 動作しない！

# ✅ 正しい例
template: |
  {{ analysis_result | trim | tojson }}   # OK
  {{ batch_get_data }}                    # OK
```

#### 変数定義と参照の対応
```yaml
variables:
  - value_selector:
      - llm_node
      - text
    variable: analysis_result  # この名前で参照

template: |
  分析結果: {{ analysis_result }}  # variableで定義した名前を使用
```
```

---

## 2. Google Sheets操作時のデータ構造に関する追記

### 現状の問題
- batch_get出力のデータ構造に関する理解不足
- `feedback_data[0].values`のような誤った参照パス
- 実際のAPI出力形式との不一致

### 改善案
**全体コーディングルール/06_外部連携とツール.md** に以下を追加：

```markdown
### Google Sheets batch_getの出力形式（重要）

#### 実際の出力構造
batch_getノードの出力は以下の構造：
```json
{
  "json": [
    {
      "range": "Sheet1!A1:D10",
      "majorDimension": "ROWS",
      "values": [
        ["ヘッダー1", "ヘッダー2", "ヘッダー3"],
        ["データ1", "データ2", "データ3"]
      ]
    }
  ]
}
```

#### template-transformでの正しい参照方法
```yaml
variables:
  - value_selector:
      - batch_get_node
      - json
    value_type: array[object]
    variable: sheet_data

template: |
  {% if sheet_data and sheet_data[0] and sheet_data[0].values %}
    {% for row in sheet_data[0].values %}
      行データ: {{ row | join(", ") }}
    {% endfor %}
  {% else %}
    データが取得できませんでした
  {% endif %}
```

#### よくある間違い
- `feedback_data.values`（配列要素の指定忘れ）
- `{{#batch_get_node.json[0].values#}}`（template内で#記号使用）
- 出力構造の階層を理解せずに参照
```

---

## 3. エラー防止チェックリストへの追加項目

### 改善案
**品質チェック/品質チェックリスト.md** の「0.6 エラー頻発箇所の特別チェック」に追加：

```markdown
#### template-transformノード（最優先）
- [ ] **template内で{{#変数#}}形式を使用していない（致命的エラー）**
- [ ] **template内では必ず{{ 変数 }}形式を使用**
- [ ] **フィルター使用時も{{ 変数 | filter }}形式**
- [ ] **variablesで定義した変数名とtemplate内の参照名が一致**
- [ ] **Google Sheetsデータ参照時は[0]インデックスを忘れていない**
```

---

## 4. クラッシュ事項チェックリストへの追加

### 改善案
**品質チェック/クラッシュ事項チェックリスト.md** の最上部に新セクション追加：

```markdown
## 0. template-transformノードの致命的エラー（最優先）

### 症状
- `jinja2.exceptions.TemplateSyntaxError: unexpected char '#'`
- template-transformノードでの即座のクラッシュ

### 原因
- template内で`{{#変数#}}`記法を使用（これは他のノード用の記法）
- Jinja2テンプレートエンジンが`#`を不正な文字として認識

### チェック項目
- [ ] **全てのtemplate-transformノードで{{ 変数 }}記法を使用**
- [ ] **フィルター付きでも{{ 変数 | filter }}形式**
- [ ] **#記号が一切含まれていない**

### 修正例
```yaml
# 致命的エラー
template: "{{#result | trim | tojson#}}"

# 正しい記法
template: "{{ result | trim | tojson }}"
```
```

---

## 5. コンポーネント記述ルールへの追加

### 改善案
新規ファイル作成：**コンポーネント別コーディングルール/コンポーネント記述ルール_TEMPLATE_TRANSFORM.txt**

```
コンポーネント記述ルール: TEMPLATE-TRANSFORM

■ブロック概要
データ形式の変換やテンプレート処理を行うノード。Jinja2テンプレートエンジンを使用。
主にGoogle Sheets操作時のデータ整形やLLM出力の形式変換に使用。

■最重要ルール（これを守らないとクラッシュ）
1. template内では必ず{{ 変数 }}記法を使用（{{#変数#}}は絶対禁止）
2. 変数はvariablesセクションで事前定義が必須
3. 外側のtype: "custom"、内側のdata.type: "template-transform"

■必須パラメータ
- id: ノードID
- type: "custom"（外側）
- data:
  - type: "template-transform"（内側）
  - template: Jinja2テンプレート文字列
  - variables: 変数定義の配列
  - selected: false
  - title: ノードタイトル

■変数定義の形式
variables:
  - value_selector: [参照元ノード, フィールド名]
    value_type: string/array[object]/object等
    variable: テンプレート内で使用する変数名

■使用例（Google Sheets書き込み用）
- data:
    type: template-transform
    template: |
      [{
        "range": "OUTPUT!A1:B2",
        "values": [
          ["タイトル", "内容"],
          ["分析結果", {{ analysis_result | trim | tojson }}]
        ]
      }]
    variables:
      - value_selector:
          - llm_node
          - text
        value_type: string
        variable: analysis_result
    selected: false
    title: データ整形

■よくあるエラーと対策
1. {{#変数#}}記法の使用 → {{ 変数 }}に修正
2. 変数未定義エラー → variablesセクションで定義
3. インデックスエラー → 配列要素は[0]等で明示的に指定
4. フィルターエラー → | tojson（jsonではない）を使用

■推奨される使用場面
- Google Sheetsへの書き込みデータ整形
- CSV形式への変換
- JSON配列の構築
- 複数変数の結合

■使用を避けるべき場面
- 複雑なロジック処理（codeノードを使用）
- 大量データの処理（メモリ制限あり）
- 数値計算や条件分岐（codeノードを使用）
```

---

## 6. 開発依頼プロンプトテンプレートへの追加

### 改善案
**開発依頼/Dify_YML作成依頼プロンプト_テンプレート.txt** に以下を追加：

```
### template-transformノードに関する重要な注意事項

template-transformノードを使用する場合、以下の記法ルールを必ず守ってください：

1. **変数参照は{{ 変数名 }}形式のみ使用**
   - ❌ 間違い: {{#変数名#}}
   - ✅ 正解: {{ 変数名 }}

2. **フィルター使用時も同様**
   - ❌ 間違い: {{#変数 | trim | tojson#}}
   - ✅ 正解: {{ 変数 | trim | tojson }}

3. **Google Sheetsデータの参照**
   - batch_get出力は配列形式
   - 必ず[0]でアクセス: sheet_data[0].values

これらのルールを守らないと、実行時にクラッシュします。
```

---

## 7. トラブルシューティングガイドへの追加

### 改善案
**全体コーディングルール/05_トラブルシューティング.md** に追加：

```markdown
### template-transformノードのエラー対処法

#### エラー: "unexpected char '#'"
**原因**: template内で{{#変数#}}記法を使用
**解決方法**: 
1. すべての{{#変数#}}を{{ 変数 }}に置換
2. フィルター部分も同様に修正
3. variablesセクションで変数が定義されているか確認

#### エラー: "Variable 'xxx' is not defined"
**原因**: テンプレート内で未定義の変数を参照
**解決方法**:
1. variablesセクションに変数定義を追加
2. value_selectorが正しいパスを指定しているか確認
3. variable名とtemplate内の参照名が一致しているか確認

#### エラー: "'NoneType' object is not subscriptable"
**原因**: 存在しないデータ構造への参照
**解決方法**:
1. Google Sheetsデータは[0]インデックスが必要
2. 条件チェックを追加: {% if data and data[0] %}
3. データ構造を事前に確認
```

---

## まとめ

これらの改善により、template-transformノードでの変数参照エラーを大幅に削減できると考えられます。特に重要なのは：

1. **記法の明確な区別**：template内では{{ }}、他のノードでは{{# #}}
2. **具体的なエラー例の提示**：実際のエラーケースを基にした説明
3. **チェックリストへの追加**：開発者が見落としやすいポイントの明確化

これらの改善案を各ファイルに反映することで、同様のエラーの再発を防止できます。