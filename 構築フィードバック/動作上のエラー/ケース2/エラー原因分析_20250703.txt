## 営業成績管理システム エラー原因分析

### エラー概要
- **システム名**: 営業成績管理システム_5088.yml
- **エラータイプ**: Jinja2テンプレートレンダリングエラー
- **発生箇所**: template-transformノード（行382-403）

### 根本原因
template-transformノード内で、Google Sheets APIから返される配列データに対する不安全なインデックスアクセスと、複雑な条件分岐処理がエラーの原因です。

### 具体的な問題点

1. **不安全な配列アクセス**
   ```yaml
   {% if row[4] == target_month %}
   ```
   - 配列の長さチェックなしに`row[4]`にアクセス
   - 配列が5要素未満の場合、インデックスエラーが発生

2. **型の不一致**
   ```yaml
   {% if row[4] == target_month %}
   ```
   - `row[4]`（おそらく数値型）と`target_month`（文字列型）の直接比較
   - 型変換なしの比較は予期しない結果をもたらす可能性

3. **複雑なネスト構造**
   ```yaml
   {% if sales_data and sales_data[0] and sales_data[0].values %}
     {% for row in sales_data[0].values %}
       {% if row[4] == target_month %}
   ```
   - 3重のネストと複数の条件チェック
   - template-transformノードには過度に複雑

4. **変数参照形式の理解不足**
   - template-transform内では`{{ variable }}`形式（正しい）
   - しかし、配列要素へのアクセス方法に問題

### 成功例との比較

**成功例（GoogleShpredSheetサンプル.yml）**：
```yaml
template: '{{ Get_Input }}'  # 単純な変数展開のみ
```

**成功例（複雑な処理が必要な場合）**：
```yaml
template: "[\n  {\n    \"range\": \"OUTPUT!A1:B1\",\n    \"values\": [[\"text\", {{ arg1 | trim | tojson }} ]]\n  }\n]\n"
```
- フィルタ（trim、tojson）を使用した安全な処理
- 配列への直接アクセスを避けている

### 推奨される修正方法

1. **安全な配列アクセス**
   ```yaml
   {% if row|length > 4 and row[4]|string == target_month|string %}
   ```

2. **エラーハンドリングの追加**
   ```yaml
   営業担当者：{{ row[0] | default("不明") }}
   成績：{{ row[1] | default("データなし") }}
   ```

3. **処理の分離**
   - Google Sheetsからのデータ取得: toolノード
   - データの整形・フィルタリング: codeノード
   - 最終的な表示形式への変換: template-transformノード

4. **codeノードでの前処理例**
   ```python
   # 安全にデータを処理
   filtered_data = []
   for row in sales_data.get('values', []):
       if len(row) > 4 and str(row[4]) == str(target_month):
           filtered_data.append({
               'name': row[0] if len(row) > 0 else '不明',
               'performance': row[1] if len(row) > 1 else 'データなし'
           })
   return {'filtered_data': filtered_data}
   ```

### 結論
template-transformノードは、基本的なテンプレート処理に適しており、複雑なデータ構造の操作や条件分岐には向いていません。特に配列インデックスへの直接アクセスは、エラーの原因となりやすいため、事前のチェックか、codeノードでの前処理を推奨します。

### 追加の推奨事項
1. template-transform内では`{{ }}`記法を使用（正しい）
2. 他のノード（LLM、answer等）では`{{#変数#}}`記法を使用
3. 配列操作はcodeノードで実施
4. template-transformは文字列の整形に特化させる