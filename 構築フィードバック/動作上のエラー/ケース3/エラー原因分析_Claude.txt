# ケース3: 営業実績分類システム_検証用.yml エラー原因分析

## エラー内容
- TypeError: 'builtin_function_or_method' object is not iterable
- Jinja2テンプレートエラー（line 14）

## エラー発生箇所
template-transformノード（ID: transform_to_csv）の以下のテンプレート:

```
営業データ（CSV形式）：
{% if sheet_data and sheet_data[0] and sheet_data[0].values %}
{% for row in sheet_data[0].values %}
{{ row | join(',') }}
{% endfor %}
{% else %}
データが見つかりません
{% endif %}
```

## エラー原因
1. **変数参照の誤り**：
   - ケース1, 2と同じエラーパターン
   - `sheet_data[0].values` という参照方法が間違っている
   - 条件分岐で一部エラーをカバーしようとしているが、根本的な参照方法が誤り

2. **API応答構造の理解不足**：
   - Google Sheets batch_get APIの応答は以下の形式:
     ```
     [{
       "valueRanges": [{
         "range": "INPUT!A1:B100",
         "values": [[...], [...], ...]
       }]
     }]
     ```
   - `values` は直接のプロパティではなく、`valueRanges[0]` の下にある

3. **その他の問題点**：
   - prepare_sheet_data（行475-500）での変数参照で`| default('')`がフィルターとして認識されていない可能性
   - 変数参照の不統一（`sheet_data`と`{{#transform_to_csv.output#}}`の混在）

## 成功例との比較
成功例では正しい階層でアクセス：
```
{% set rows = sheet_data[0]["valueRanges"][0]["values"] %}
```

## 修正案
```
営業データ（CSV形式）：
{% if sheet_data and sheet_data[0] and sheet_data[0]["valueRanges"] and sheet_data[0]["valueRanges"][0]["values"] %}
{% set rows = sheet_data[0]["valueRanges"][0]["values"] %}
{% for row in rows %}
{{ row | join(',') }}
{% endfor %}
{% else %}
データが見つかりません
{% endif %}
```

## 推奨事項
1. テンプレート内でのピリオド記法（`object.property`）の使用を避け、ブラケット記法（`object["property"]`）を使用
2. エラーハンドリングの条件も正しいパスで記述
3. defaultフィルターの適切な使用方法の確認